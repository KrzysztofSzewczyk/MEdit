/* Generated by JTB 1.4.11 */
package medit.BPP.visitor;

import medit.BPP.syntaxtree.AdditiveExpression;
import medit.BPP.syntaxtree.IfExpression;
import medit.BPP.syntaxtree.JavaStaticMethods;
import medit.BPP.syntaxtree.MathExpression;
import medit.BPP.syntaxtree.MultiplicativeExpression;
import medit.BPP.syntaxtree.NodeChoice;
import medit.BPP.syntaxtree.NodeList;
import medit.BPP.syntaxtree.NodeListOptional;
import medit.BPP.syntaxtree.NodeOptional;
import medit.BPP.syntaxtree.NodeSequence;
import medit.BPP.syntaxtree.NodeTCF;
import medit.BPP.syntaxtree.NodeToken;
import medit.BPP.syntaxtree.RelationalEqualityExpression;
import medit.BPP.syntaxtree.RelationalExprssion;
import medit.BPP.syntaxtree.RelationalGreaterExpression;
import medit.BPP.syntaxtree.RelationalLessExpression;
import medit.BPP.syntaxtree.Require;
import medit.BPP.syntaxtree.Start;
import medit.BPP.syntaxtree.StatementExpression;
import medit.BPP.syntaxtree.UnaryExpression;
import medit.BPP.syntaxtree.UnaryRelational;
import medit.BPP.syntaxtree.VariableAssign;
import medit.BPP.syntaxtree.VariableDeclaration;
import medit.BPP.syntaxtree.VariableName;
import medit.BPP.syntaxtree.WhileExpression;

public interface IRetArguVisitor<R, A> {

	public R visit(final AdditiveExpression n, final A argu);

	public R visit(final IfExpression n, final A argu);

	public R visit(final JavaStaticMethods n, final A argu);

	public R visit(final MathExpression n, final A argu);

	public R visit(final MultiplicativeExpression n, final A argu);

	public R visit(final NodeChoice n, final A argu);

	public R visit(final NodeList n, final A argu);

	public R visit(final NodeListOptional n, final A argu);

	public R visit(final NodeOptional n, final A argu);

	public R visit(final NodeSequence n, final A argu);

	public R visit(final NodeTCF n, final A argu);

	public R visit(final NodeToken n, final A argu);

	public R visit(final RelationalEqualityExpression n, final A argu);

	public R visit(final RelationalExprssion n, final A argu);

	public R visit(final RelationalGreaterExpression n, final A argu);

	public R visit(final RelationalLessExpression n, final A argu);

	public R visit(final Require n, final A argu);

	public R visit(final Start n, final A argu);

	public R visit(final StatementExpression n, final A argu);

	public R visit(final UnaryExpression n, final A argu);

	public R visit(final UnaryRelational n, final A argu);

	public R visit(final VariableAssign n, final A argu);

	public R visit(final VariableDeclaration n, final A argu);

	public R visit(final VariableName n, final A argu);

	public R visit(final WhileExpression n, final A argu);

}
