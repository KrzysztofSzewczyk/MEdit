/* Generated by JTB 1.4.11 */
package medit.BPP.visitor;

import medit.BPP.syntaxtree.AdditiveExpression;
import medit.BPP.syntaxtree.IfExpression;
import medit.BPP.syntaxtree.JavaStaticMethods;
import medit.BPP.syntaxtree.MathExpression;
import medit.BPP.syntaxtree.MultiplicativeExpression;
import medit.BPP.syntaxtree.NodeChoice;
import medit.BPP.syntaxtree.NodeList;
import medit.BPP.syntaxtree.NodeListOptional;
import medit.BPP.syntaxtree.NodeOptional;
import medit.BPP.syntaxtree.NodeSequence;
import medit.BPP.syntaxtree.NodeTCF;
import medit.BPP.syntaxtree.NodeToken;
import medit.BPP.syntaxtree.RelationalEqualityExpression;
import medit.BPP.syntaxtree.RelationalExprssion;
import medit.BPP.syntaxtree.RelationalGreaterExpression;
import medit.BPP.syntaxtree.RelationalLessExpression;
import medit.BPP.syntaxtree.Require;
import medit.BPP.syntaxtree.Start;
import medit.BPP.syntaxtree.StatementExpression;
import medit.BPP.syntaxtree.UnaryExpression;
import medit.BPP.syntaxtree.UnaryRelational;
import medit.BPP.syntaxtree.VariableAssign;
import medit.BPP.syntaxtree.VariableDeclaration;
import medit.BPP.syntaxtree.VariableName;
import medit.BPP.syntaxtree.WhileExpression;

public interface IRetVisitor<R> {

	public R visit(final AdditiveExpression n);

	public R visit(final IfExpression n);

	public R visit(final JavaStaticMethods n);

	public R visit(final MathExpression n);

	public R visit(final MultiplicativeExpression n);

	public R visit(final NodeChoice n);

	public R visit(final NodeList n);

	public R visit(final NodeListOptional n);

	public R visit(final NodeOptional n);

	public R visit(final NodeSequence n);

	public R visit(final NodeTCF n);

	public R visit(final NodeToken n);

	public R visit(final RelationalEqualityExpression n);

	public R visit(final RelationalExprssion n);

	public R visit(final RelationalGreaterExpression n);

	public R visit(final RelationalLessExpression n);

	public R visit(final Require n);

	public R visit(final Start n);

	public R visit(final StatementExpression n);

	public R visit(final UnaryExpression n);

	public R visit(final UnaryRelational n);

	public R visit(final VariableAssign n);

	public R visit(final VariableDeclaration n);

	public R visit(final VariableName n);

	public R visit(final WhileExpression n);

}
