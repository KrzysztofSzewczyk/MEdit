
options {
  JDK_VERSION = "1.5";
  STATIC = false;
}

PARSER_BEGIN(BPP) 
package medit.BPP;

import medit.BPP.syntaxtree.*;
import medit.BPP.visitor.*;
import medit.BPP.interpreter.*;

public class BPP {
  
}
PARSER_END(BPP)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"\"" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN :
{
	< REQUERE: "with" >
| 	< IF: "if" >
| 	< WHILE: "while" >
| 	< DO: "begin" >
| 	< STOP: "end" >
| 	< DEF : "var" >
}

TOKEN : /* SYMBOLS */
{
	< DOT: "." >
| 	< COLON: ":" >
| 	< EQ: "==" >
| 	< GT: ">"  >
| 	< LT: "<"  >
| 	< GE: ">=" >
| 	< LE: "<=" >
| 	< NE: "!=" >
| 	< PLUS: "+">
| 	< MINUS: "-" >
| 	< MUL: "*" >
| 	< DIV: "/" >
| 	< MOD: "%" >
| 	< ASSIGN: "=" > 
}

/*
	Literals, maybe can said “value” or “data” (in St4tic) example:

	def myAge = 24.
	def var	= 666.

	if 11 > 10 do
		…
	stop

	a values “24, 666, 11, 10” is checked or parsed as literals.
*/
TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* | "0"   >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER: ["_","a"-"z","A"-"Z"] >
|  < #DIGIT: ["0"-"9"] >
}

/* GRAMMAR start here */

/*
	This is an enter point for St4tic parsing without it, a parser can't started,
	for this rule we need mandatory to specifying a “require” (if you notice “+”, one or many)
	and after it a program instructions (notice “*”, no-one or many):
*/
void Start():{}
{
  (    Require() "."
  )+

  (    StatementExpression()
  )*
}

/*
	Here for packages importation can be one word after “require” or many like :
	
	require java .
	require java lang .
	...
*/
void Require():{}
{	"with"	(	  < IDENTIFIER >
	)+
}

/* Simple Math Operations */
void MathExpression():{ } 
{
  AdditiveExpression()
}

void AdditiveExpression():{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():{}
{
  "(" MathExpression() ")" | < INTEGER_LITERAL > | VariableName()
}

/* Start Simple Relational Test */
void RelationalExprssion():{}
{	RelationalEqualityExpression()
}

void RelationalEqualityExpression():{}
{	RelationalGreaterExpression()	[	  (	     "==" | "!="	  )
	  RelationalGreaterExpression()	]
}

void RelationalGreaterExpression():{}
{
	RelationalLessExpression()
	[
	  (
	     ">" | ">="
	  )
	   RelationalLessExpression()
	]
}

void RelationalLessExpression():{}
{
	UnaryRelational()
	[
	  (
	     "<" | "<="
	  )
	  
	  UnaryRelational()
	  
	]
}

void UnaryRelational():{}{
	   MathExpression()	
}
/* End Simple Relational Test */

/*
	"if" expression is a classcal test if true do something
	like in :
	-----------------------------------------------
		Java				|	VB
	-----------------------------------------------
	if( 1 > 0 )				|	If 1 > 0 Then	{						|		...		...					|	End If
	}						|
							|	 
	Here is :
	if 1 > 0 do
		...
	stop

	"stop" is end of if block 
*/
void IfExpression():{}
{	"if" RelationalExprssion() "begin"
		(
		  StatementExpression()		) *
	"end"
}

/*
	"while" expression is a classcal test while true repeat something
	like in :
	-----------------------------------------------
		Java				|	VB
	-----------------------------------------------
	while( 1 > 0 )			|	While 1 > 0
	{						|		...
		...					|	End While
	}						|
							|	 
	Here is :
	while 1 > 0 do
		...
	stop

	"stop" is end of while block 
*/
void WhileExpression():{}
{
	"while" RelationalExprssion() "begin"
		(
		  StatementExpression()
		) *
	"end"}

/*
	Variable declaration expresion is a syntax of variables
	declaration in St4tic
	in Perl we declare variables by using keyword "my"
	or VB by using "dim", St4tic use "def" for definition
	or define it.
	like def var = 1. 
*/
void VariableDeclaration():{}
{	"var" VariableName() "=" MathExpression() "."
}

void VariableAssign():{}
{	VariableName() "=" MathExpression() "."
}

void VariableName():{}
{	< IDENTIFIER >
}

void JavaStaticMethods():{}
{	< IDENTIFIER > /* Class Name */	(	  ":" < IDENTIFIER > /* Member or Method */
	)+

	"(" MathExpression() ( "," MathExpression() )* ")" "."	  
}

/*
	“statement expression” is program body or algorithm can content 
	a many variables declaration, variables assign, logical tests (if;while) 
	or Java methods calling (remember in St4tic just public static methods).
*/
void StatementExpression():{}
{
  VariableDeclaration()
| LOOKAHEAD(2) VariableAssign()
| JavaStaticMethods()
| IfExpression()
| WhileExpression()}
