/* Generated by JTB 1.4.11 */
package medit.BPP.syntaxtree;

import java.util.ArrayList;
import java.util.Iterator;

import medit.BPP.visitor.IRetArguVisitor;
import medit.BPP.visitor.IRetVisitor;
import medit.BPP.visitor.IVoidArguVisitor;
import medit.BPP.visitor.IVoidVisitor;

public class NodeListOptional implements INodeList {

	private static final int allocTb[] = { 0, 1, 2, 3, 4, 5, 10, 20, 50 };

	private static final long serialVersionUID = 1411L;

	private int allocNb = 0;

	public ArrayList<INode> nodes;

	public NodeListOptional() {
		this.nodes = new ArrayList<>(NodeListOptional.allocTb[this.allocNb]);
	}

	public NodeListOptional(final INode firstNode) {
		this.nodes = new ArrayList<>(NodeListOptional.allocTb[this.allocNb]);
		this.addNode(firstNode);
	}

	public NodeListOptional(final int sz) {
		this.nodes = new ArrayList<>(sz);
	}

	public NodeListOptional(final int sz, final INode firstNode) {
		this.nodes = new ArrayList<>(sz);
		this.addNode(firstNode);
	}

	@Override
	public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
		return vis.visit(this, argu);
	}

	@Override
	public <R> R accept(final IRetVisitor<R> vis) {
		return vis.visit(this);
	}

	@Override
	public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
		vis.visit(this, argu);
	}

	@Override
	public void accept(final IVoidVisitor vis) {
		vis.visit(this);
	}

	@Override
	public void addNode(final INode n) {
		if (++this.allocNb < NodeListOptional.allocTb.length)
			this.nodes.ensureCapacity(NodeListOptional.allocTb[this.allocNb]);
		else
			this.nodes.ensureCapacity((this.allocNb - NodeListOptional.allocTb.length + 2)
					* NodeListOptional.allocTb[NodeListOptional.allocTb.length - 1]);
		this.nodes.add(n);
	}

	@Override
	public INode elementAt(final int i) {
		return this.nodes.get(i);
	}

	@Override
	public Iterator<INode> elements() {
		return this.nodes.iterator();
	}

	public boolean present() {
		return this.nodes.size() != 0;
	}

	@Override
	public int size() {
		return this.nodes.size();
	}

}
