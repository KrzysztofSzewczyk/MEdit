/* Generated By:JavaCC: Do not edit this line. BPPTokenManager.java */
package medit.BPP;

/** Token Manager. */
public class BPPTokenManager implements BPPConstants {

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	static final int[] jjnextStates = { 1, 2, 4, };

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, "\167\151\164\150",
			"\151\146", "\167\150\151\154\145", "\142\145\147\151\156", "\145\156\144", "\166\141\162", "\56", "\72",
			"\75\75", "\76", "\74", "\76\75", "\74\75", "\41\75", "\53", "\55", "\52", "\57", "\45", "\75", null, null,
			null, null, "\50", "\51", "\54", };

	static final long[] jjtoSkip = { 0x3eL, };

	static final long[] jjtoToken = { 0x1cfffffc1L, };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };

	protected char curChar;

	int curLexState = 0;

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	int defaultLexState = 0;

	protected SimpleCharStream input_stream;

	int jjmatchedKind;

	int jjmatchedPos;

	int jjnewStateCnt;

	int jjround;

	private final int[] jjrounds = new int[10];
	private final int[] jjstateSet = new int[20];

	/** Constructor. */
	public BPPTokenManager(final SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		this.input_stream = stream;
	}

	/** Constructor. */
	public BPPTokenManager(final SimpleCharStream stream, final int lexState) {
		this(stream);
		this.SwitchTo(lexState);
	}

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				this.curChar = this.input_stream.BeginToken();
			} catch (final java.io.IOException e) {
				this.jjmatchedKind = 0;
				matchedToken = this.jjFillToken();
				return matchedToken;
			}

			try {
				this.input_stream.backup(0);
				while (this.curChar <= 32 && (0x100002600L & 1L << this.curChar) != 0L)
					this.curChar = this.input_stream.BeginToken();
			} catch (final java.io.IOException e1) {
				continue EOFLoop;
			}
			this.jjmatchedKind = 0x7fffffff;
			this.jjmatchedPos = 0;
			curPos = this.jjMoveStringLiteralDfa0_0();
			if (this.jjmatchedKind != 0x7fffffff) {
				if (this.jjmatchedPos + 1 < curPos)
					this.input_stream.backup(curPos - this.jjmatchedPos - 1);
				if ((BPPTokenManager.jjtoToken[this.jjmatchedKind >> 6] & 1L << (this.jjmatchedKind & 077)) != 0L) {
					matchedToken = this.jjFillToken();
					return matchedToken;
				} else
					continue EOFLoop;
			}
			int error_line = this.input_stream.getEndLine();
			int error_column = this.input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				this.input_stream.readChar();
				this.input_stream.backup(1);
			} catch (final java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
				if (this.curChar == '\n' || this.curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				this.input_stream.backup(1);
				error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, this.curLexState, error_line, error_column, error_after, this.curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjAddStates(int start, final int end) {
		do
			this.jjstateSet[this.jjnewStateCnt++] = BPPTokenManager.jjnextStates[start];
		while (start++ != end);
	}

	private void jjCheckNAdd(final int state) {
		if (this.jjrounds[state] != this.jjround) {
			this.jjstateSet[this.jjnewStateCnt++] = state;
			this.jjrounds[state] = this.jjround;
		}
	}

	private void jjCheckNAddStates(int start, final int end) {
		do
			this.jjCheckNAdd(BPPTokenManager.jjnextStates[start]);
		while (start++ != end);
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		final String im = BPPTokenManager.jjstrLiteralImages[this.jjmatchedKind];
		curTokenImage = im == null ? this.input_stream.GetImage() : im;
		beginLine = this.input_stream.getBeginLine();
		beginColumn = this.input_stream.getBeginColumn();
		endLine = this.input_stream.getEndLine();
		endColumn = this.input_stream.getEndColumn();
		t = Token.newToken(this.jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	private int jjMoveNfa_0(final int startState, int curPos) {
		int startsAt = 0;
		this.jjnewStateCnt = 10;
		int i = 1;
		this.jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++this.jjround == 0x7fffffff)
				this.ReInitRounds();
			if (this.curChar < 64) {
				final long l = 1L << this.curChar;
				do
					switch (this.jjstateSet[--i]) {
					case 0:
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
							this.jjCheckNAdd(6);
						} else if (this.curChar == 48) {
							if (kind > 26)
								kind = 26;
						} else if (this.curChar == 34)
							this.jjCheckNAddStates(0, 2);
						break;
					case 1:
						if ((0xffffffffffffdbffL & l) != 0L)
							this.jjCheckNAddStates(0, 2);
						break;
					case 2:
						if ((0x2400L & l) != 0L && kind > 5)
							kind = 5;
						break;
					case 3:
						if (this.curChar == 10 && kind > 5)
							kind = 5;
						break;
					case 4:
						if (this.curChar == 13)
							this.jjstateSet[this.jjnewStateCnt++] = 3;
						break;
					case 5:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						this.jjCheckNAdd(6);
						break;
					case 6:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						this.jjCheckNAdd(6);
						break;
					case 7:
						if (this.curChar == 48 && kind > 26)
							kind = 26;
						break;
					case 9:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 27)
							kind = 27;
						this.jjstateSet[this.jjnewStateCnt++] = 9;
						break;
					default:
						break;
					}
				while (i != startsAt);
			} else if (this.curChar < 128) {
				final long l = 1L << (this.curChar & 077);
				do
					switch (this.jjstateSet[--i]) {
					case 0:
					case 9:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 27)
							kind = 27;
						this.jjCheckNAdd(9);
						break;
					case 1:
						this.jjAddStates(0, 2);
						break;
					default:
						break;
					}
				while (i != startsAt);
			} else {
				final int i2 = (this.curChar & 0xff) >> 6;
				final long l2 = 1L << (this.curChar & 077);
				do
					switch (this.jjstateSet[--i]) {
					case 1:
						if ((BPPTokenManager.jjbitVec0[i2] & l2) != 0L)
							this.jjAddStates(0, 2);
						break;
					default:
						break;
					}
				while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				this.jjmatchedKind = kind;
				this.jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = this.jjnewStateCnt) == (startsAt = 10 - (this.jjnewStateCnt = startsAt)))
				return curPos;
			try {
				this.curChar = this.input_stream.readChar();
			} catch (final java.io.IOException e) {
				return curPos;
			}
		}
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (this.curChar) {
		case 33:
			return this.jjMoveStringLiteralDfa1_0(0x80000L);
		case 37:
			return this.jjStopAtPos(0, 24);
		case 40:
			return this.jjStopAtPos(0, 30);
		case 41:
			return this.jjStopAtPos(0, 31);
		case 42:
			return this.jjStopAtPos(0, 22);
		case 43:
			return this.jjStopAtPos(0, 20);
		case 44:
			return this.jjStopAtPos(0, 32);
		case 45:
			return this.jjStopAtPos(0, 21);
		case 46:
			return this.jjStopAtPos(0, 12);
		case 47:
			return this.jjStopAtPos(0, 23);
		case 58:
			return this.jjStopAtPos(0, 13);
		case 60:
			this.jjmatchedKind = 16;
			return this.jjMoveStringLiteralDfa1_0(0x40000L);
		case 61:
			this.jjmatchedKind = 25;
			return this.jjMoveStringLiteralDfa1_0(0x4000L);
		case 62:
			this.jjmatchedKind = 15;
			return this.jjMoveStringLiteralDfa1_0(0x20000L);
		case 98:
			return this.jjMoveStringLiteralDfa1_0(0x200L);
		case 101:
			return this.jjMoveStringLiteralDfa1_0(0x400L);
		case 105:
			return this.jjMoveStringLiteralDfa1_0(0x80L);
		case 118:
			return this.jjMoveStringLiteralDfa1_0(0x800L);
		case 119:
			return this.jjMoveStringLiteralDfa1_0(0x140L);
		default:
			return this.jjMoveNfa_0(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(final long active0) {
		try {
			this.curChar = this.input_stream.readChar();
		} catch (final java.io.IOException e) {
			this.jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (this.curChar) {
		case 61:
			if ((active0 & 0x4000L) != 0L)
				return this.jjStopAtPos(1, 14);
			else if ((active0 & 0x20000L) != 0L)
				return this.jjStopAtPos(1, 17);
			else if ((active0 & 0x40000L) != 0L)
				return this.jjStopAtPos(1, 18);
			else if ((active0 & 0x80000L) != 0L)
				return this.jjStopAtPos(1, 19);
			break;
		case 97:
			return this.jjMoveStringLiteralDfa2_0(active0, 0x800L);
		case 101:
			return this.jjMoveStringLiteralDfa2_0(active0, 0x200L);
		case 102:
			if ((active0 & 0x80L) != 0L)
				return this.jjStartNfaWithStates_0(1, 7, 9);
			break;
		case 104:
			return this.jjMoveStringLiteralDfa2_0(active0, 0x100L);
		case 105:
			return this.jjMoveStringLiteralDfa2_0(active0, 0x40L);
		case 110:
			return this.jjMoveStringLiteralDfa2_0(active0, 0x400L);
		default:
			break;
		}
		return this.jjStartNfa_0(0, active0);
	}

	private int jjMoveStringLiteralDfa2_0(final long old0, long active0) {
		if ((active0 &= old0) == 0L)
			return this.jjStartNfa_0(0, old0);
		try {
			this.curChar = this.input_stream.readChar();
		} catch (final java.io.IOException e) {
			this.jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (this.curChar) {
		case 100:
			if ((active0 & 0x400L) != 0L)
				return this.jjStartNfaWithStates_0(2, 10, 9);
			break;
		case 103:
			return this.jjMoveStringLiteralDfa3_0(active0, 0x200L);
		case 105:
			return this.jjMoveStringLiteralDfa3_0(active0, 0x100L);
		case 114:
			if ((active0 & 0x800L) != 0L)
				return this.jjStartNfaWithStates_0(2, 11, 9);
			break;
		case 116:
			return this.jjMoveStringLiteralDfa3_0(active0, 0x40L);
		default:
			break;
		}
		return this.jjStartNfa_0(1, active0);
	}

	private int jjMoveStringLiteralDfa3_0(final long old0, long active0) {
		if ((active0 &= old0) == 0L)
			return this.jjStartNfa_0(1, old0);
		try {
			this.curChar = this.input_stream.readChar();
		} catch (final java.io.IOException e) {
			this.jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (this.curChar) {
		case 104:
			if ((active0 & 0x40L) != 0L)
				return this.jjStartNfaWithStates_0(3, 6, 9);
			break;
		case 105:
			return this.jjMoveStringLiteralDfa4_0(active0, 0x200L);
		case 108:
			return this.jjMoveStringLiteralDfa4_0(active0, 0x100L);
		default:
			break;
		}
		return this.jjStartNfa_0(2, active0);
	}

	private int jjMoveStringLiteralDfa4_0(final long old0, long active0) {
		if ((active0 &= old0) == 0L)
			return this.jjStartNfa_0(2, old0);
		try {
			this.curChar = this.input_stream.readChar();
		} catch (final java.io.IOException e) {
			this.jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (this.curChar) {
		case 101:
			if ((active0 & 0x100L) != 0L)
				return this.jjStartNfaWithStates_0(4, 8, 9);
			break;
		case 110:
			if ((active0 & 0x200L) != 0L)
				return this.jjStartNfaWithStates_0(4, 9, 9);
			break;
		default:
			break;
		}
		return this.jjStartNfa_0(3, active0);
	}

	private final int jjStartNfa_0(final int pos, final long active0) {
		return this.jjMoveNfa_0(this.jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private int jjStartNfaWithStates_0(final int pos, final int kind, final int state) {
		this.jjmatchedKind = kind;
		this.jjmatchedPos = pos;
		try {
			this.curChar = this.input_stream.readChar();
		} catch (final java.io.IOException e) {
			return pos + 1;
		}
		return this.jjMoveNfa_0(state, pos + 1);
	}

	private int jjStopAtPos(final int pos, final int kind) {
		this.jjmatchedKind = kind;
		this.jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjStopStringLiteralDfa_0(final int pos, final long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0xfc0L) != 0L) {
				this.jjmatchedKind = 27;
				return 9;
			}
			return -1;
		case 1:
			if ((active0 & 0x80L) != 0L)
				return 9;
			if ((active0 & 0xf40L) != 0L) {
				this.jjmatchedKind = 27;
				this.jjmatchedPos = 1;
				return 9;
			}
			return -1;
		case 2:
			if ((active0 & 0x340L) != 0L) {
				this.jjmatchedKind = 27;
				this.jjmatchedPos = 2;
				return 9;
			}
			if ((active0 & 0xc00L) != 0L)
				return 9;
			return -1;
		case 3:
			if ((active0 & 0x300L) != 0L) {
				this.jjmatchedKind = 27;
				this.jjmatchedPos = 3;
				return 9;
			}
			if ((active0 & 0x40L) != 0L)
				return 9;
			return -1;
		default:
			return -1;
		}
	}

	/** Reinitialise parser. */
	public void ReInit(final SimpleCharStream stream) {
		this.jjmatchedPos = this.jjnewStateCnt = 0;
		this.curLexState = this.defaultLexState;
		this.input_stream = stream;
		this.ReInitRounds();
	}

	/** Reinitialise parser. */
	public void ReInit(final SimpleCharStream stream, final int lexState) {
		this.ReInit(stream);
		this.SwitchTo(lexState);
	}

	private void ReInitRounds() {
		int i;
		this.jjround = 0x80000001;
		for (i = 10; i-- > 0;)
			this.jjrounds[i] = 0x80000000;
	}

	/** Set debug output. */
	public void setDebugStream(final java.io.PrintStream ds) {
		this.debugStream = ds;
	}

	/** Switch to specified lex state. */
	public void SwitchTo(final int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			this.curLexState = lexState;
	}

}
