/* The following code was generated by JFlex 1.4.1 on 12/29/16 1:21 AM */

/*
 * 11/24/2015
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.IOException;
import java.io.Reader;
import java.util.Stack;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.RSyntaxUtilities;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;
import org.fife.ui.rsyntaxtextarea.TokenTypes;

/**
 * Scanner for TypeScript files. Currently it is a clone of
 * {@code JavaScriptTokenMaker}, but it should diverge over time to match the
 * added features of TypeScript.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance. Memory allocation needs to be almost completely
 * removed to be competitive with the handwritten lexers (subclasses of
 * <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around). We can
 * achieve this because RText always scans exactly 1 line of tokens at a time,
 * and hands the scanner this line as an array of characters (a Segment really).
 * Since tokens contain pointers to char arrays instead of Strings holding their
 * contents, there is no need for allocating new memory for Strings.
 * <p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.
 * <p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 * <li>The generated <code>TypeScriptTokenMaker.java</code> file will contain
 * two definitions of both <code>zzRefill</code> and <code>yyreset</code>. You
 * should hand-delete the second of each definition (the ones generated by the
 * lexer), as these generated methods modify the input buffer, which we'll never
 * have to do.</li>
 * <li>You should also change the declaration/definition of zzBuffer to NOT be
 * initialized. This is a needless memory allocation for us since we will be
 * pointing the array somewhere else anyway.</li>
 * <li>You should NOT call <code>yylex()</code> on the generated scanner
 * directly; rather, you should use <code>getTokenList</code> as you would with
 * any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.9
 */

public class TypeScriptTokenMaker extends AbstractJFlexCTokenMaker {

	public static final int E4X = 6;

	public static final int E4X_CDATA = 13;
	public static final int E4X_COMMENT = 7;
	public static final int E4X_DTD = 9;
	public static final int E4X_INATTR_DOUBLE = 11;
	public static final int E4X_INATTR_SINGLE = 12;
	public static final int E4X_INTAG = 10;
	public static final int E4X_PI = 8;
	/**
	 * Whether e4x is being highlighted.
	 */
	private static boolean e4xSupported;
	private static final int INTERNAL_E4X = -14;
	private static final int INTERNAL_E4X_ATTR_DOUBLE = -21;
	private static final int INTERNAL_E4X_ATTR_SINGLE = -20;
	private static final int INTERNAL_E4X_DTD = -18;
	private static final int INTERNAL_E4X_DTD_INTERNAL = -19;
	private static final int INTERNAL_E4X_INTAG = -15;
	private static final int INTERNAL_E4X_MARKUP_CDATA = -22;
	private static final int INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION = -16;

	private static final int INTERNAL_IN_E4X_COMMENT = -17;

	/**
	 * Token type specifying we're in an invalid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_INVALID = -12;

	/**
	 * Token type specifying we're in a valid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_VALID = -13;

	/**
	 * Token type specifying we're in a JavaScript documentation comment.
	 */
	private static final int INTERNAL_IN_JS_COMMENT_DOCUMENTATION = -9;

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	private static final int INTERNAL_IN_JS_MLC = -8;

	/**
	 * Token type specifying we're in an invalid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_INVALID = -10;

	/**
	 * Token type specifying we're in a valid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_VALID = -11;

	/**
	 * Token type specifying we're in an invalid multi-line template literal.
	 */
	private static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID = -24;

	/**
	 * Token type specifying we're in a valid multi-line template literal.
	 */
	private static final int INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID = -23;

	public static final int JS_CHAR = 2;

	public static final int JS_DOCCOMMENT = 4;

	public static final int JS_EOL_COMMENT = 5;

	public static final int JS_MLC = 3;

	/** lexical states */
	public static final int JS_STRING = 1;

	public static final int JS_TEMPLATE_LITERAL = 14;
	public static final int JS_TEMPLATE_LITERAL_EXPR = 15;
	/**
	 * Language state set on JS tokens. Must be 0.
	 */
	private static final int LANG_INDEX_DEFAULT = 0;

	/**
	 * Language state set on E4X tokens.
	 */
	private static final int LANG_INDEX_E4X = 1;

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	public static final int YYINITIAL = 0;

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = TypeScriptTokenMaker.zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\13\0\2\1\3\0\1\2\1\3\1\4\1\5\2\6"
			+ "\1\5\1\2\3\7\1\5\1\10\1\5\6\7\1\2" + "\1\5\1\2\20\5\1\11\1\12\2\5\1\13\1\1"
			+ "\1\14\1\15\1\16\1\1\1\17\1\20\1\21\1\1" + "\1\22\5\1\1\23\10\1\1\24\3\1\2\5\1\25"
			+ "\1\26\1\27\1\30\1\1\1\31\5\1\1\32\2\1" + "\1\33\1\1\1\34\1\35\1\36\2\37\1\40\1\41"
			+ "\1\42\1\43\1\1\1\44\4\1\1\45\1\46\1\47" + "\1\50\1\1\1\51\1\1\1\52\1\2\1\53\1\6"
			+ "\1\54\1\53\1\54\1\53\1\55\1\53\1\5\2\0" + "\1\56\1\57\2\7\2\0\1\60\1\7\1\5\1\61"
			+ "\34\5\2\62\7\5\1\62\13\5\1\63\1\64\1\65" + "\1\66\4\0\1\67\2\0\1\70\32\0\1\71\1\26"
			+ "\1\72\1\73\1\27\5\0\1\74\2\0\1\75\1\76" + "\1\2\1\54\1\0\2\55\1\5\1\77\1\100\2\5"
			+ "\1\101\37\5\1\101\26\5\64\0\1\102\2\0\1\103" + "\5\0\1\104\1\2\1\105\6\5\1\106\5\5\1\107"
			+ "\1\5\1\110\25\5\1\0\1\1\1\0\1\111\15\0" + "\1\112\45\0\1\113\4\0\1\114\1\0\1\115\2\0"
			+ "\1\116\1\0\1\117\1\2\5\5\1\62\17\5\1\62" + "\1\5\15\0\1\112\20\0\1\112\20\0\1\2\4\5"
			+ "\1\120\13\5\33\0\10\5\1\112\4\0\1\112\12\0" + "\3\5\6\0\1\5\2\0\1\121\1\0";

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = TypeScriptTokenMaker.zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\13\0\2\1\3\0\2\1\1\11\4\1\1\11\4\1"
			+ "\2\11\4\1\1\11\24\1\2\11\2\1\1\11\1\1" + "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"
			+ "\1\11\5\1\1\11\10\1\1\11\5\1\1\11\2\1" + "\1\11\1\1\1\11\5\1\1\11\2\1\1\11\1\1"
			+ "\3\11\3\1\3\11\1\1\1\11\4\1\1\11\2\1" + "\1\11\1\1\1\11\1\1\1\11\12\1\2\0\1\11"
			+ "\3\1\2\0\1\11\64\1\1\11\2\1\1\11\4\0" + "\1\11\2\0\1\11\32\0\3\1\2\11\5\0\1\11"
			+ "\2\0\2\11\2\1\1\0\76\1\64\0\1\1\2\0" + "\1\11\5\0\1\11\1\1\1\11\44\1\1\0\1\11"
			+ "\1\0\1\1\15\0\1\11\45\0\1\1\4\0\1\1" + "\1\0\1\11\2\0\1\1\1\0\1\11\30\1\15\0"
			+ "\1\1\20\0\1\1\20\0\21\1\33\0\11\1\4\0" + "\1\1\12\0\3\1\6\0\1\1\2\0\1\11\1\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = TypeScriptTokenMaker.zzUnpackCMap(TypeScriptTokenMaker.ZZ_CMAP_PACKED);

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\75\1\2\1\0\1\1\1\11\22\0\1\75\1\36\1\77"
			+ "\1\12\1\15\1\35\1\40\1\107\2\106\1\17\1\30\1\27\1\24" + "\1\25\1\16\1\5\7\7\2\4\1\41\1\76\1\31\1\32\1\34"
			+ "\1\37\1\45\1\103\1\6\1\101\1\102\1\23\1\22\2\3\1\112"
			+ "\2\3\1\21\1\3\1\111\5\3\1\104\3\3\1\20\2\3\1\100"
			+ "\1\13\1\105\1\33\1\14\1\113\1\46\1\47\1\53\1\65\1\54"
			+ "\1\70\1\57\1\61\1\56\1\3\1\64\1\55\1\44\1\60\1\62" + "\1\66\1\73\1\52\1\50\1\51\1\10\1\71\1\63\1\72\1\67"
			+ "\1\110\1\74\1\43\1\26\1\42\uff81\0";

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	private static final int ZZ_NO_MATCH = 1;

	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = TypeScriptTokenMaker.zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"
			+ "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"
			+ "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u0558"
			+ "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0558\0\u0558\0\u0804\0\u0850"
			+ "\0\u089c\0\u08e8\0\u0558\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64"
			+ "\0\u0ab0\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4"
			+ "\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0558"
			+ "\0\u0558\0\u0f24\0\u0f70\0\u0558\0\u0fbc\0\u0558\0\u1008\0\u0558"
			+ "\0\u1054\0\u0558\0\u1008\0\u0558\0\u10a0\0\u0558\0\u10ec\0\u1138"
			+ "\0\u1184\0\u11d0\0\u121c\0\u0558\0\u1268\0\u12b4\0\u1300\0\u134c"
			+ "\0\u1398\0\u13e4\0\u1430\0\u147c\0\u0558\0\u14c8\0\u1514\0\u1560"
			+ "\0\u15ac\0\u15f8\0\u0558\0\u1644\0\u1690\0\u0558\0\u16dc\0\u0558"
			+ "\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u0558\0\u18a4\0\u18f0"
			+ "\0\u0558\0\u193c\0\u0558\0\u0558\0\u0558\0\u1988\0\u19d4\0\u1a20"
			+ "\0\u0558\0\u0558\0\u0558\0\u1a6c\0\u0558\0\u1ab8\0\u1b04\0\u1b50"
			+ "\0\u1b9c\0\u0558\0\u1008\0\u1be8\0\u0558\0\u1c34\0\u0558\0\u1c80"
			+ "\0\u0558\0\u1ccc\0\u1d18\0\u1d18\0\u1d18\0\u1d64\0\u1db0\0\u1dfc"
			+ "\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u0558\0\u1fc4\0\u1f2c"
			+ "\0\u2010\0\u0720\0\u2010\0\u0558\0\u205c\0\u20a8\0\u20f4\0\u2140"
			+ "\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0"
			+ "\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600"
			+ "\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860"
			+ "\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u05a4\0\u29dc\0\u2a28\0\u2a74"
			+ "\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4"
			+ "\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34"
			+ "\0\u0558\0\u2f80\0\u2fcc\0\u0558\0\u3018\0\u3064\0\u30b0\0\u30fc"
			+ "\0\u0558\0\u3148\0\u3194\0\u0558\0\u31e0\0\u322c\0\u3278\0\u32c4"
			+ "\0\u3310\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524"
			+ "\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784"
			+ "\0\u37d0\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4"
			+ "\0\u3a30\0\u0558\0\u0558\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac"
			+ "\0\u0558\0\u3bf8\0\u3c44\0\u0558\0\u0558\0\u3c90\0\u3cdc\0\u3d28"
			+ "\0\u1d18\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u05a4"
			+ "\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150"
			+ "\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0"
			+ "\0\u43fc\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610"
			+ "\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u4824\0\u4870"
			+ "\0\u48bc\0\u4908\0\u4954\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0"
			+ "\0\u4b1c\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4\0\u4d30"
			+ "\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u4ef8\0\u4f44\0\u4f90"
			+ "\0\u4fdc\0\u5028\0\u5074\0\u50c0\0\u510c\0\u5158\0\u51a4\0\u51f0"
			+ "\0\u523c\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u5404\0\u5450"
			+ "\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618\0\u5664\0\u56b0"
			+ "\0\u56fc\0\u5748\0\u5794\0\u57e0\0\u582c\0\u5878\0\u58c4\0\u5910"
			+ "\0\u595c\0\u59a8\0\u59f4\0\u5a40\0\u5a8c\0\u5ad8\0\u5b24\0\u5b70"
			+ "\0\u5bbc\0\u5c08\0\u5c54\0\u5ca0\0\u5cec\0\u5d38\0\u5d84\0\u5dd0"
			+ "\0\u5e1c\0\u5e68\0\u5eb4\0\u5f00\0\u5f4c\0\u0558\0\u5f98\0\u5fe4"
			+ "\0\u6030\0\u607c\0\u60c8\0\u0558\0\u6114\0\u0558\0\u6160\0\u61ac"
			+ "\0\u61f8\0\u6244\0\u6290\0\u62dc\0\u05a4\0\u6328\0\u6374\0\u63c0"
			+ "\0\u640c\0\u6458\0\u05a4\0\u64a4\0\u05a4\0\u64f0\0\u653c\0\u6588"
			+ "\0\u65d4\0\u6620\0\u666c\0\u66b8\0\u6704\0\u6750\0\u679c\0\u67e8"
			+ "\0\u6834\0\u6880\0\u68cc\0\u6918\0\u6964\0\u69b0\0\u69fc\0\u6a48"
			+ "\0\u6a94\0\u6ae0\0\u2fcc\0\u0558\0\u6b2c\0\u6b78\0\u6bc4\0\u6c10"
			+ "\0\u6c5c\0\u6ca8\0\u6cf4\0\u6d40\0\u6d8c\0\u6dd8\0\u6e24\0\u6e70"
			+ "\0\u6ebc\0\u6f08\0\u6f54\0\u0558\0\u6fa0\0\u6fec\0\u7038\0\u7084"
			+ "\0\u70d0\0\u711c\0\u7168\0\u71b4\0\u7200\0\u724c\0\u7298\0\u72e4"
			+ "\0\u7330\0\u737c\0\u73c8\0\u7414\0\u7460\0\u74ac\0\u74f8\0\u7544"
			+ "\0\u7590\0\u75dc\0\u7628\0\u7674\0\u76c0\0\u770c\0\u7758\0\u77a4"
			+ "\0\u77f0\0\u783c\0\u7888\0\u78d4\0\u7920\0\u796c\0\u79b8\0\u7a04"
			+ "\0\u7a50\0\u7a9c\0\u7ae8\0\u7b34\0\u7b80\0\u7bcc\0\u7c18\0\u7c64"
			+ "\0\u0558\0\u7cb0\0\u7cfc\0\u7d48\0\u7d94\0\u0558\0\u7de0\0\u7e2c"
			+ "\0\u7e78\0\u7ec4\0\u7f10\0\u7f5c\0\u42cc\0\u7fa8\0\u7ff4\0\u8040"
			+ "\0\u808c\0\u80d8\0\u8124\0\u8170\0\u81bc\0\u8208\0\u8254\0\u82a0"
			+ "\0\u82ec\0\u8338\0\u8384\0\u83d0\0\u841c\0\u8468\0\u6b78\0\u84b4"
			+ "\0\u8500\0\u854c\0\u8598\0\u85e4\0\u8630\0\u867c\0\u86c8\0\u8714"
			+ "\0\u8760\0\u87ac\0\u87f8\0\u8844\0\u8890\0\u88dc\0\u8928\0\u8974"
			+ "\0\u89c0\0\u8a0c\0\u8a58\0\u8aa4\0\u8af0\0\u8b3c\0\u8b88\0\u8bd4"
			+ "\0\u8c20\0\u8c6c\0\u8cb8\0\u8d04\0\u8d50\0\u8d9c\0\u8de8\0\u8e34"
			+ "\0\u8e80\0\u8ecc\0\u8f18\0\u8f64\0\u7a9c\0\u8fb0\0\u8ffc\0\u9048"
			+ "\0\u7c18\0\u9094\0\u90e0\0\u7d48\0\u912c\0\u9178\0\u91c4\0\u9210"
			+ "\0\u925c\0\u92a8\0\u05a4\0\u92f4\0\u9340\0\u938c\0\u93d8\0\u9424"
			+ "\0\u9470\0\u94bc\0\u9508\0\u9554\0\u95a0\0\u95ec\0\u9638\0\u9684"
			+ "\0\u96d0\0\u971c\0\u9768\0\u97b4\0\u9800\0\u984c\0\u9898\0\u98e4"
			+ "\0\u9930\0\u997c\0\u99c8\0\u9a14\0\u9a60\0\u9aac\0\u9af8\0\u9b44"
			+ "\0\u9b90\0\u9bdc\0\u9c28\0\u9c74\0\u9cc0\0\u9d0c\0\u9d58\0\u9da4"
			+ "\0\u9df0\0\u9e3c\0\u9e88\0\u9ed4\0\u9f20\0\u9f6c\0\u9fb8\0\ua004"
			+ "\0\ua050\0\ua09c\0\ua0e8\0\ua134\0\ua180\0\ua1cc\0\u7038\0\ua218"
			+ "\0\ua264\0\ua2b0\0\ua2fc\0\ua348\0\ua394\0\ua3e0\0\ua42c\0\ua478"
			+ "\0\ua4c4\0\ua510\0\ua55c\0\ua5a8\0\ua5f4\0\ua640\0\ua68c\0\ua6d8"
			+ "\0\ua724\0\ua770\0\ua7bc\0\ua808\0\ua854\0\u0558\0\ua8a0";

	/* user code: */

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = TypeScriptTokenMaker.zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\21\1\22\1\23\1\24\1\25\1\26\1\24\1\25"
			+ "\1\27\1\30\2\21\2\24\1\31\1\32\4\24\1\33" + "\1\34\1\35\1\36\1\37\1\40\1\41\1\32\1\42"
			+ "\2\32\1\43\1\44\2\43\1\45\1\46\1\47\1\50" + "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"
			+ "\1\61\1\62\2\24\1\63\1\24\1\64\1\65\1\24" + "\1\66\1\67\2\24\1\35\1\22\1\36\1\70\1\35"
			+ "\4\24\2\35\1\71\1\24\1\72\1\73\1\74\2\75" + "\1\76\10\75\1\77\63\75\1\100\14\75\2\101\1\102"
			+ "\10\101\1\103\73\101\1\104\4\101\2\105\1\106\14\105"
			+ "\1\107\41\105\1\110\1\105\1\111\4\105\1\112\23\105"
			+ "\2\113\1\114\14\113\1\115\11\113\1\116\13\113\1\117"
			+ "\13\113\1\120\1\113\1\121\4\113\1\122\3\113\1\123" + "\17\113\2\124\1\125\56\124\1\126\1\124\1\127\4\124"
			+ "\1\130\23\124\1\131\1\132\1\133\26\131\1\134\6\131"
			+ "\1\135\34\131\1\22\1\136\15\131\2\137\1\140\21\137"
			+ "\1\141\34\137\1\142\1\137\1\143\4\137\1\144\23\137"
			+ "\2\145\1\146\34\145\1\147\54\145\2\150\1\151\26\150"
			+ "\1\152\2\150\1\153\43\150\1\154\4\150\1\155\6\150" + "\1\156\1\157\1\0\13\156\1\160\13\156\1\43\1\156"
			+ "\1\161\40\156\1\22\1\156\1\162\7\156\1\163\4\156"
			+ "\77\164\1\165\14\164\107\166\1\165\4\166\105\167\1\170"
			+ "\6\167\2\171\1\172\10\171\1\173\1\171\1\174\75\171"
			+ "\1\175\2\176\1\177\12\176\1\200\10\176\1\201\65\176" + "\1\21\2\0\6\21\1\0\4\21\2\0\4\21\20\0"
			+ "\30\21\5\0\4\21\3\0\3\21\2\0\1\22\73\0" + "\1\22\132\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\26\24\5\0" + "\4\24\3\0\3\24\1\0\1\203\2\0\1\203\2\25"
			+ "\1\203\1\25\1\203\1\0\4\203\2\0\1\203\1\204" + "\1\205\1\206\1\0\1\207\16\0\10\203\1\206\1\204"
			+ "\7\203\1\205\2\203\1\205\3\203\5\0\1\203\1\205" + "\2\203\3\0\3\203\1\0\1\203\2\0\1\203\1\210"
			+ "\1\211\1\203\1\211\1\203\1\0\4\203\2\0\1\212" + "\1\204\1\205\1\206\1\0\1\207\16\0\10\203\1\206"
			+ "\1\204\7\203\1\205\2\203\1\205\1\203\1\212\1\203" + "\5\0\1\203\1\205\2\203\3\0\3\203\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\12\24\1\213\13\24\5\0\4\24"
			+ "\3\0\3\24\1\0\13\214\1\215\2\214\1\216\1\217" + "\12\214\1\220\61\214\32\0\1\43\105\0\1\43\5\0"
			+ "\1\43\65\0\2\207\1\0\1\207\134\0\1\43\1\0" + "\1\221\112\0\1\222\1\43\62\0\1\223\27\0\1\224"
			+ "\1\43\42\0\1\223\50\0\1\43\1\0\1\225\111\0" + "\1\43\5\0\1\43\105\0\1\43\10\0\1\43\50\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\14\24\1\226\11\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\1\227\2\21" + "\1\227\1\21\1\227\1\0\4\21\2\0\4\227\20\0"
			+ "\1\227\1\21\26\227\5\0\4\227\3\0\3\227\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\1\24\1\230\10\24\1\231" + "\13\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\4\24\1\232\7\24\1\233\4\24\1\234"
			+ "\4\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\5\24\1\235\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\24\1\21\3\24\1\236\7\24\1\237\1\24" + "\1\240\3\24\1\241\4\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\4\24\1\242\6\24"
			+ "\1\243\5\24\1\244\4\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\6\24\1\245\17\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\1\246\6\24\1\247\3\24\1\250\1\251\11\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\1\252\1\24\1\253\4\24\1\254\2\24\1\255" + "\10\24\1\256\1\257\1\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\6\24\1\260\5\24"
			+ "\1\261\11\24\5\0\4\24\3\0\3\24\1\0\1\21" + "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\262\1\21\2\24\1\263\7\24\1\264\7\24" + "\1\265\3\24\5\0\4\24\3\0\3\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\14\24\1\266\11\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\5\24\1\267\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\1\270\5\24\1\271\17\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\10\24\1\272\2\24" + "\1\273\12\24\5\0\4\24\3\0\3\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\6\24\1\274\5\24\1\275\11\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\5\24" + "\1\276\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\1\277\3\24\1\300\21\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\5\24\1\301\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\1\302\6\24\1\303\1\304\3\24\1\305\11\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\1\305\13\24\1\306\11\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\1\307\25\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\12\24\1\310\13\24\5\0\4\24\3\0\3\24\1\0"
			+ "\2\75\1\0\10\75\1\0\63\75\1\0\14\75\2\311" + "\1\0\5\311\1\312\61\311\1\313\21\311\2\101\1\0"
			+ "\10\101\1\0\73\101\1\0\4\101\2\105\1\0\14\105" + "\1\0\41\105\1\0\1\105\1\0\4\105\1\0\23\105"
			+ "\16\0\1\314\146\0\1\315\125\0\1\316\101\0\1\317" + "\4\0\1\320\35\0\2\113\1\0\14\113\1\0\11\113"
			+ "\1\0\13\113\1\0\13\113\1\0\1\113\1\0\4\113" + "\1\0\3\113\1\0\17\113\16\0\1\321\100\0\1\322"
			+ "\2\0\1\322\1\0\1\322\5\0\1\323\1\0\4\322" + "\10\0\1\324\7\0\1\322\1\0\26\322\5\0\4\322"
			+ "\3\0\3\322\45\0\1\325\1\0\1\326\1\327\1\330" + "\1\331\1\332\1\333\1\334\1\335\1\336\1\337\1\340"
			+ "\3\0\1\341\1\342\1\343\1\0\1\344\1\345\73\0" + "\1\346\125\0\1\347\101\0\1\350\4\0\1\351\102\0"
			+ "\1\352\46\0\2\124\1\0\56\124\1\0\1\124\1\0" + "\4\124\1\0\23\124\51\0\1\353\125\0\1\354\101\0"
			+ "\1\355\4\0\1\356\35\0\2\131\1\0\26\131\1\0" + "\6\131\1\0\34\131\2\0\16\131\1\132\1\0\26\131"
			+ "\1\0\6\131\1\0\34\131\1\22\1\0\15\131\3\0" + "\1\357\2\0\1\357\1\0\1\357\3\0\1\357\1\0"
			+ "\1\360\1\0\4\357\12\0\1\361\1\362\1\0\1\357" + "\2\0\1\357\1\0\26\357\5\0\4\357\3\0\3\357"
			+ "\1\0\75\135\1\0\1\363\15\135\2\137\1\0\21\137" + "\1\0\34\137\1\0\1\137\1\0\4\137\1\0\23\137"
			+ "\24\0\1\364\140\0\1\365\125\0\1\366\101\0\1\367" + "\4\0\1\370\35\0\2\145\1\0\34\145\1\0\54\145"
			+ "\34\0\1\371\57\0\2\150\1\0\26\150\1\0\2\150" + "\1\0\43\150\1\0\4\150\1\0\6\150\36\0\1\372"
			+ "\55\0\2\156\1\0\13\156\1\0\13\156\1\0\1\156" + "\1\0\40\156\1\0\1\156\1\0\7\156\1\0\5\156"
			+ "\1\157\1\0\13\156\1\0\13\156\1\0\1\156\1\0" + "\40\156\1\22\1\156\1\0\7\156\1\0\4\156\34\0"
			+ "\1\161\57\0\77\164\1\0\14\164\107\166\1\0\4\166" + "\105\167\1\0\6\167\105\0\1\373\6\0\2\171\1\0"
			+ "\10\171\1\0\1\171\1\0\75\171\75\0\1\374\17\0" + "\2\176\1\0\12\176\1\0\10\176\1\0\65\176\74\0"
			+ "\1\375\17\0\1\21\2\0\5\21\1\376\1\0\4\21" + "\2\0\4\21\20\0\30\21\5\0\4\21\3\0\3\21"
			+ "\1\0\1\203\2\0\6\203\1\0\4\203\2\0\4\203" + "\20\0\30\203\5\0\4\203\3\0\3\203\1\0\1\203"
			+ "\2\0\1\203\2\377\1\203\1\377\1\203\1\0\4\203" + "\2\0\4\203\1\u0100\3\0\1\u0100\13\0\30\203\5\0"
			+ "\4\203\3\0\3\203\1\0\1\203\2\0\1\203\2\207" + "\1\203\1\207\1\203\1\0\4\203\2\0\2\203\1\205"
			+ "\1\206\20\0\10\203\1\206\10\203\1\205\2\203\1\205" + "\3\203\5\0\1\203\1\205\2\203\3\0\3\203\1\0"
			+ "\1\203\2\0\1\203\2\210\1\203\1\210\1\203\1\0" + "\4\203\2\0\2\203\1\205\1\206\1\0\1\207\16\0"
			+ "\10\203\1\206\10\203\1\205\2\203\1\205\3\203\5\0" + "\1\203\1\205\2\203\3\0\3\203\1\0\1\203\2\0"
			+ "\1\203\1\210\1\211\1\203\1\211\1\203\1\0\4\203" + "\2\0\1\203\1\u0101\1\205\1\206\1\0\1\207\16\0"
			+ "\10\203\1\206\1\u0101\7\203\1\205\2\203\1\205\3\203" + "\5\0\1\203\1\205\2\203\3\0\3\203\1\0\1\203"
			+ "\2\0\1\203\4\u0102\1\203\1\0\4\203\2\0\2\203"
			+ "\2\u0102\20\0\2\203\2\u0102\3\203\2\u0102\10\203\1\u0102"
			+ "\2\203\1\u0102\3\203\5\0\3\u0102\1\203\3\0\3\203" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\6\24\1\u0103\17\24" + "\5\0\4\24\3\0\3\24\1\0\13\214\1\215\2\214"
			+ "\1\u0104\77\214\1\0\111\214\17\0\1\u0105\75\0\1\223" + "\27\0\1\224\43\0\1\223\50\0\1\43\1\0\1\32"
			+ "\57\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\17\24\1\u0106\6\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\227" + "\1\0\4\21\2\0\4\227\20\0\1\227\1\21\26\227"
			+ "\5\0\4\227\3\0\3\227\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\2\24\1\u0107\23\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\21\24\1\u0108\4\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\6\24\1\u0109\17\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\14\24\1\u010a\11\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\3\24\1\u010b\22\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\20\24\1\u010c\5\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\1\u010d\3\24\1\u010e\21\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\14\24\1\u010f"
			+ "\11\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\10\24\1\u0110\15\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\12\24\1\u0111" + "\13\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\5\24\1\u0112\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\1\u0113\20\24\1\265\4\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\4\24\1\u0114\3\24\1\u0115\15\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\20\24\1\u0116" + "\5\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\3\24\1\u0117\22\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\2\24\1\u0118"
			+ "\1\u0119\22\24\5\0\4\24\3\0\3\24\1\0\1\21" + "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\24\1\21\1\u011a\25\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\1\u011b\25\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\12\24\1\u011c\13\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\5\24\1\u011d\20\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\5\24\1\u011e\20\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\2\24\1\u0118\23\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\5\24"
			+ "\1\u011f\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\26\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\1\u0120\25\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\3\24"
			+ "\1\u0121\14\24\1\u0122\5\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\3\24\1\265\22\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\12\24\1\u0123\13\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\20\24\1\u0124\5\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\2\24\1\u0125\1\24"
			+ "\20\0\1\24\1\21\26\24\5\0\4\24\3\0\1\24" + "\1\u0126\1\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\2\24" + "\1\u0127\1\u0128\22\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\3\24\1\u0129\22\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\u012a\1\21"
			+ "\7\24\1\u012b\16\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\3\24\1\u012c\22\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\15\24\1\265\10\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\3\24\1\u012d\22\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\10\24\1\u012e\15\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\1\24\1\u012f\5\24\1\u0130" + "\12\24\1\u0131\3\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\5\24\1\u0132\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\26\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\1\24"
			+ "\1\u0133\24\24\5\0\4\24\3\0\3\24\1\0\1\21" + "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\24\1\21\4\24\1\u0134\1\u0135\20\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\10\24\1\u0136\3\24\1\u0137\11\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\12\24\1\u0138"
			+ "\13\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\7\24\1\u0139\16\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\14\24\1\u013a" + "\11\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\12\24\1\u013b\13\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\4\24\1\265"
			+ "\21\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\7\24\1\u013c\1\u013d\15\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\26\24" + "\5\0\4\24\3\0\1\24\1\265\1\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\22\24\1\u013e\3\24\5\0\4\24"
			+ "\3\0\3\24\5\0\4\u013f\12\0\2\u013f\22\0\2\u013f" + "\3\0\2\u013f\10\0\1\u013f\2\0\1\u013f\10\0\3\u013f"
			+ "\14\0\4\u0140\12\0\2\u0140\22\0\2\u0140\3\0\2\u0140"
			+ "\10\0\1\u0140\2\0\1\u0140\10\0\3\u0140\61\0\1\u0141"
			+ "\125\0\1\u0142\116\0\1\u0143\102\0\1\u0144\36\0\34\322" + "\1\324\57\322\3\0\1\322\2\0\1\322\1\0\1\322"
			+ "\7\0\4\322\10\0\1\324\7\0\1\322\1\0\26\322" + "\5\0\4\322\3\0\3\322\55\0\1\u0145\1\0\1\u0146"
			+ "\3\0\1\u0147\41\0\1\u0148\36\0\1\u0149\3\0\1\u014a"
			+ "\1\0\1\u014b\120\0\1\u014c\41\0\1\u014d\40\0\1\u014e"
			+ "\2\0\1\u014f\1\0\1\u0150\116\0\1\u0151\1\u0152\4\0"
			+ "\1\u0153\100\0\1\u0154\105\0\1\u0155\6\0\1\u0156\4\0"
			+ "\1\u0157\111\0\1\u0158\10\0\1\u0159\1\u015a\75\0\1\u015b"
			+ "\1\0\1\u015c\114\0\1\u015d\1\u015e\110\0\1\u015f\104\0"
			+ "\1\u0160\123\0\1\u0161\111\0\1\u0162\47\0\1\u0163\35\0"
			+ "\1\u0164\3\0\1\u0165\117\0\1\u0166\103\0\1\u0167\5\0"
			+ "\1\u0168\110\0\1\u0169\125\0\1\u016a\116\0\1\u016b\102\0"
			+ "\1\u016c\107\0\1\u016d\3\0\1\u016e\107\0\1\u016f\125\0"
			+ "\1\u0170\116\0\1\u0171\102\0\1\u0172\41\0\6\357\3\0" + "\1\357\3\0\6\357\13\0\1\357\2\0\1\357\1\0"
			+ "\26\357\5\0\4\357\3\0\3\357\4\0\1\u0173\2\0" + "\1\u0173\1\0\1\u0173\3\0\1\u0173\3\0\4\u0173\15\0"
			+ "\1\u0173\2\0\1\u0173\1\0\26\u0173\5\0\4\u0173\3\0"
			+ "\3\u0173\25\0\1\u0174\53\0\1\u0175\47\0\1\u0176\130\0"
			+ "\1\u0177\125\0\1\u0178\116\0\1\u0179\102\0\1\u017a\62\0"
			+ "\1\u017b\123\0\1\u017c\57\0\1\21\2\0\1\21\4\u017d" + "\1\21\1\0\4\21\2\0\2\21\2\u017d\20\0\2\21"
			+ "\2\u017d\3\21\2\u017d\10\21\1\u017d\2\21\1\u017d\3\21" + "\5\0\3\u017d\1\21\3\0\3\21\1\0\1\203\2\0"
			+ "\1\203\2\377\1\203\1\377\1\203\1\0\4\203\2\0" + "\2\203\1\205\1\203\20\0\21\203\1\205\2\203\1\205"
			+ "\3\203\5\0\1\203\1\205\2\203\3\0\3\203\5\0" + "\2\377\1\0\1\377\104\0\1\203\2\0\1\203\4\u0102"
			+ "\1\203\1\0\4\203\2\0\1\203\1\u0101\2\u0102\20\0"
			+ "\2\203\2\u0102\3\203\2\u0102\1\u0101\7\203\1\u0102\2\203"
			+ "\1\u0102\3\203\5\0\3\u0102\1\203\3\0\3\203\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\2\24\1\253\23\24\5\0" + "\4\24\3\0\3\24\45\0\1\u0104\11\0\2\u0104\52\0"
			+ "\1\u017e\75\0\1\21\2\0\5\24\1\u012e\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\26\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\3\24\1\u017f\22\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\1\u0180\25\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\7\24\1\u0181\16\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\6\24\1\u0108\17\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\6\24\1\305\17\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\3\24\1\u0182\22\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\10\24\1\261\15\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\4\24\1\u0183\21\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\3\24\1\u0119\22\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\5\24\1\u0184\20\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\6\24\1\u0185\17\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\12\24\1\u0186\13\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\14\24\1\u0187\11\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\2\24\1\265\23\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\6\24\1\u0188\17\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\5\24\1\u0189\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\26\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\6\24"
			+ "\1\265\17\24\5\0\4\24\3\0\3\24\1\0\1\21" + "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\24\1\21\5\24\1\u012d\20\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\2\24" + "\1\u0115\23\24\5\0\4\24\3\0\3\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\4\24\1\u0108\21\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\2\24"
			+ "\1\260\1\u018a\22\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\13\24\1\u018b\12\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\1\u018c\25\24\5\0\4\24\3\0\3\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\265\1\21\26\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\7\24\1\u018d\16\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\6\24\1\u018e\17\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\14\24\1\u018f\11\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\11\24\1\u0108\14\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\7\24\1\u0190\4\24"
			+ "\1\u018f\11\24\5\0\4\24\3\0\3\24\1\0\1\21" + "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\24\1\21\10\24\1\u0191\15\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\1\u0192" + "\25\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\3\24\1\u0193\22\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\6\24\1\u0194"
			+ "\17\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\14\24\1\265\11\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\1\24\1\u0195" + "\24\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\7\24\1\265\16\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\10\24\1\u0196"
			+ "\15\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\13\24\1\265\12\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\7\24\1\u0118" + "\16\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\5\24\1\u0197\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\26\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\6\24\1\u0198\17\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\1\u0199\25\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\1\24\1\u019a\24\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\7\24\1\u0182\16\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\2\24\1\u019b\23\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\16\24\1\u019c\7\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\23\24\1\u019d\2\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\3\24\1\u019e\22\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\5\24\1\u019f\20\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\2\24\1\u0112\23\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\1\u0183\25\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\1\u01a0" + "\25\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\1\u01a1\25\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\17\24\1\265\6\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\10\24\1\u01a2\15\24\5\0\4\24\3\0\3\24" + "\5\0\4\u01a3\12\0\2\u01a3\22\0\2\u01a3\3\0\2\u01a3"
			+ "\10\0\1\u01a3\2\0\1\u01a3\10\0\3\u01a3\14\0\4\u01a4"
			+ "\12\0\2\u01a4\22\0\2\u01a4\3\0\2\u01a4\10\0\1\u01a4"
			+ "\2\0\1\u01a4\10\0\3\u01a4\76\0\1\u01a5\52\0\1\u01a6"
			+ "\127\0\1\u01a7\126\0\1\u0143\103\0\1\u01a8\4\0\1\u01a9"
			+ "\134\0\1\u01aa\106\0\1\u01ab\77\0\1\u01ac\5\0\1\u01ad"
			+ "\104\0\1\u01ae\116\0\1\u01af\116\0\1\u01b0\107\0\1\u01b1"
			+ "\105\0\1\u01b2\115\0\1\u01b3\121\0\1\u01b4\117\0\1\u01b5"
			+ "\105\0\1\u01b6\3\0\1\u01b7\122\0\1\u01b8\114\0\1\u01b9"
			+ "\73\0\1\u01ba\2\0\1\u01bb\21\0\1\u01bc\75\0\1\u01bd"
			+ "\104\0\1\u01be\125\0\1\u01bf\5\0\1\u01c0\35\0\1\u01c1"
			+ "\157\0\1\u01c2\105\0\1\u01c3\2\0\1\u01c4\14\0\1\u01c5"
			+ "\105\0\1\u01c6\106\0\1\u01c7\4\0\1\u01c8\113\0\1\u01c9"
			+ "\103\0\1\u01ca\7\0\1\u01cb\115\0\1\u01cc\75\0\1\u01cd"
			+ "\127\0\1\u01ce\103\0\1\u01cf\15\0\1\u01d0\1\0\1\u01d1"
			+ "\72\0\1\u01d2\116\0\1\u01d3\117\0\1\u01d4\3\0\1\u01d5"
			+ "\103\0\1\u01d6\2\0\1\u014f\110\0\1\u01d7\113\0\1\u01d8"
			+ "\127\0\1\u01d9\52\0\1\u01da\127\0\1\u01db\126\0\1\u016b"
			+ "\47\0\1\u01dc\161\0\1\u01dd\123\0\1\u01de\52\0\1\u01df"
			+ "\127\0\1\u01e0\126\0\1\u0171\42\0\6\u0173\3\0\1\u0173"
			+ "\3\0\6\u0173\13\0\1\u0173\2\0\1\u0173\1\0\26\u0173"
			+ "\5\0\4\u0173\3\0\3\u0173\25\0\1\u01e1\170\0\1\u01e2"
			+ "\100\0\1\u01e3\52\0\1\u01e4\127\0\1\u01e5\126\0\1\u0179"
			+ "\63\0\1\u01e6\67\0\1\21\2\0\1\21\4\u01e7\1\21" + "\1\0\4\21\2\0\2\21\2\u01e7\20\0\2\21\2\u01e7"
			+ "\3\21\2\u01e7\10\21\1\u01e7\2\21\1\u01e7\3\21\5\0" + "\3\u01e7\1\21\3\0\3\21\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\4\24\1\u01e8\21\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\16\24\1\265\7\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\6\24\1\u01e9\17\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\10\24\1\u01ea\15\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\3\24\1\u0108\22\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\13\24\1\u01eb\12\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\2\24\1\u01ec\23\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\15\24\1\u01ed\10\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\14\24\1\u01ee\11\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\4\24\1\u01ef\21\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\10\24\1\u01f0\15\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\20\24\1\u01f1\5\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\12\24\1\u01f2\13\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\4\24\1\260\21\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\6\24\1\u01f3\17\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\12\24\1\u01f4\13\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\26\24\5\0\4\24\3\0\1\24\1\u018d\1\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\1\u01f5\25\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\4\24\1\u01f6\21\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\6\24\1\u011b\17\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\23\24\1\u0118\2\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\11\24\1\u01f7\14\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\3\24\1\u0118\22\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\5\24\1\u01f8\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\26\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\7\24" + "\1\u010b\16\24\5\0\4\24\3\0\3\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\6\24\1\u01f9\17\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\1\u01fa"
			+ "\25\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\1\u0198\25\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\6\24\1\u01fb\17\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\3\24\1\u01fc\22\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\7\24\1\u01fd\16\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\3\24\1\273\22\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\12\24\1\u01fe\13\24" + "\5\0\4\24\3\0\3\24\42\0\1\u01a7\6\0\1\u0143"
			+ "\46\0\6\u01a6\1\0\1\u01ff\1\0\1\u01ff\2\u01a6\1\u01ff"
			+ "\4\u01a6\2\u01ff\1\0\2\u01ff\1\0\1\u01ff\2\0\6\u01ff"
			+ "\1\0\1\u01a6\1\u01ff\26\u01a6\2\0\1\u01ff\1\0\1\u01ff"
			+ "\4\u01a6\3\u01ff\3\u01a6\17\0\1\u0200\144\0\1\u0201\125\0"
			+ "\1\u0202\106\0\1\u01b7\1\0\1\u0203\45\0\1\u0204\164\0"
			+ "\1\u0205\76\0\1\u0206\120\0\1\u0207\116\0\1\u0208\105\0"
			+ "\1\u01b7\117\0\1\u01b6\105\0\1\u0209\120\0\1\u020a\115\0"
			+ "\1\u014f\122\0\1\u020b\101\0\1\u01b4\125\0\1\u01b4\105\0"
			+ "\1\u020c\124\0\1\u020d\36\0\1\u020e\113\0\1\u020f\160\0"
			+ "\1\u0210\106\0\1\u0211\113\0\1\u0212\132\0\1\u0213\70\0"
			+ "\1\u01b4\127\0\1\u0214\77\0\1\u0215\123\0\1\u0216\121\0"
			+ "\1\u0217\116\0\1\u01b7\102\0\1\u0218\123\0\1\u01b4\111\0"
			+ "\1\u0219\102\0\1\u021a\116\0\1\u021b\106\0\1\u021c\120\0"
			+ "\1\u021d\124\0\1\u01b4\101\0\1\u01b4\112\0\1\u021e\107\0"
			+ "\1\u021f\122\0\1\u020a\104\0\1\u01c1\136\0\1\u0220\73\0"
			+ "\1\u0221\14\0\1\u0222\101\0\1\u01b7\115\0\1\u0223\105\0"
			+ "\1\u0224\104\0\1\u01db\6\0\1\u016b\46\0\6\u01da\1\0"
			+ "\1\u0225\1\0\1\u0225\2\u01da\1\u0225\4\u01da\2\u0225\1\0"
			+ "\2\u0225\1\0\1\u0225\2\0\6\u0225\1\0\1\u01da\1\u0225"
			+ "\26\u01da\2\0\1\u0225\1\0\1\u0225\4\u01da\3\u0225\3\u01da"
			+ "\17\0\1\u0226\146\0\1\u0227\122\0\1\u0228\74\0\1\u01e0"
			+ "\6\0\1\u0171\46\0\6\u01df\1\0\1\u0229\1\0\1\u0229"
			+ "\2\u01df\1\u0229\4\u01df\2\u0229\1\0\2\u0229\1\0\1\u0229"
			+ "\2\0\6\u0229\1\0\1\u01df\1\u0229\26\u01df\2\0\1\u0229"
			+ "\1\0\1\u0229\4\u01df\3\u0229\3\u01df\17\0\1\u022a\177\0"
			+ "\1\u022b\52\0\1\u01e5\6\0\1\u0179\46\0\6\u01e4\1\0"
			+ "\1\u022c\1\0\1\u022c\2\u01e4\1\u022c\4\u01e4\2\u022c\1\0"
			+ "\2\u022c\1\0\1\u022c\2\0\6\u022c\1\0\1\u01e4\1\u022c"
			+ "\26\u01e4\2\0\1\u022c\1\0\1\u022c\4\u01e4\3\u022c\3\u01e4"
			+ "\17\0\1\u022d\75\0\1\21\2\0\1\21\4\u022e\1\21" + "\1\0\4\21\2\0\2\21\2\u022e\20\0\2\21\2\u022e"
			+ "\3\21\2\u022e\10\21\1\u022e\2\21\1\u022e\3\21\5\0" + "\3\u022e\1\21\3\0\3\21\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\1\u022f\25\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\1\u0230\25\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\5\24"
			+ "\1\265\20\24\5\0\4\24\3\0\3\24\1\0\1\21" + "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\24\1\21\4\24\1\u0231\21\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\10\24" + "\1\u0232\15\24\5\0\4\24\3\0\3\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\22\24\1\265\3\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\12\24"
			+ "\1\u0233\13\24\5\0\4\24\3\0\3\24\1\0\1\21" + "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24"
			+ "\20\0\1\24\1\21\12\24\1\u0234\13\24\5\0\4\24" + "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\6\24" + "\1\u018d\17\24\5\0\4\24\3\0\3\24\1\0\1\21"
			+ "\2\0\6\24\1\0\1\21\1\202\2\24\2\0\4\24" + "\20\0\1\24\1\21\17\24\1\u0115\6\24\5\0\4\24"
			+ "\3\0\3\24\1\0\1\21\2\0\6\24\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\u0235\1\21\26\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\10\24\1\u0236\15\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\12\24\1\u0237\13\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\22\24\1\u0238\3\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\11\24\1\u010c\14\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\7\24\1\260\16\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\2\24\1\u0239\1\24\20\0\1\24\1\21\26\24" + "\5\0\4\24\3\0\2\24\1\u023a\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\11\24\1\u0118\14\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\5\24\1\u023b"
			+ "\20\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\10\24\1\u023c\15\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\7\24\1\u023d" + "\16\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\10\24\1\u023e\15\24\5\0\4\24\3\0"
			+ "\3\24\17\0\1\u01a6\151\0\1\u023f\121\0\1\u01ce\111\0"
			+ "\1\u01b4\110\0\1\u014f\120\0\1\u021b\105\0\1\u0240\111\0"
			+ "\1\u0241\111\0\1\u01b7\111\0\1\u0242\123\0\1\u01cf\120\0"
			+ "\1\u01b7\115\0\1\u0243\110\0\1\u0244\103\0\1\u0245\117\0"
			+ "\1\u0246\104\0\1\u0247\114\0\1\u0248\114\0\1\u0249\114\0"
			+ "\1\u024a\112\0\1\u01b4\130\0\1\u0204\77\0\1\u024b\113\0"
			+ "\1\u024c\121\0\1\u024d\105\0\1\u014f\107\0\1\u0150\117\0"
			+ "\1\u01b4\107\0\1\u024e\115\0\1\u024f\117\0\1\u0250\47\0"
			+ "\1\u0251\151\0\1\u0252\121\0\1\u0253\113\0\1\u0254\105\0"
			+ "\1\u0255\123\0\1\u0256\53\0\1\u01da\157\0\1\u0257\115\0"
			+ "\1\u0258\45\0\1\u01df\200\0\1\u0259\26\0\1\u01e4\75\0" + "\1\21\2\0\1\21\4\24\1\21\1\0\4\21\2\0"
			+ "\2\21\2\24\20\0\2\21\2\24\3\21\2\24\10\21" + "\1\24\2\21\1\24\3\21\5\0\3\24\1\21\3\0"
			+ "\3\21\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\5\24\1\260"
			+ "\20\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\12\24\1\u0108\13\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\14\24\1\u025a" + "\11\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\6\24\1\u025b\17\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\5\24\1\u0118\1\0\1\21" + "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\26\24"
			+ "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24" + "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24"
			+ "\1\21\6\24\1\u025c\17\24\5\0\4\24\3\0\3\24" + "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24"
			+ "\2\0\4\24\20\0\1\24\1\21\3\24\1\u01f1\22\24" + "\5\0\4\24\3\0\3\24\1\0\1\21\2\0\6\24"
			+ "\1\0\1\21\1\202\2\24\2\0\4\24\20\0\1\24" + "\1\21\5\24\1\u0116\20\24\5\0\4\24\3\0\3\24"
			+ "\1\0\1\21\2\0\6\24\1\0\1\21\1\202\2\24" + "\2\0\4\24\20\0\1\24\1\21\1\u025d\25\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\7\24\1\u025e\16\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\12\24\1\u025f\13\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\3\24\1\u0260\22\24\5\0\4\24\3\0\3\24\1\0"
			+ "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0" + "\4\24\20\0\1\24\1\21\14\24\1\u0261\11\24\5\0"
			+ "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\21\24\1\265\4\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\3\24\1\u023d\22\24\5\0" + "\4\24\3\0\3\24\53\0\1\u0262\121\0\1\u024c\101\0"
			+ "\1\u0263\117\0\1\u0264\115\0\1\u0265\117\0\1\u0266\113\0"
			+ "\1\u0267\105\0\1\u01d6\107\0\1\u0268\132\0\1\u0269\74\0"
			+ "\1\u01c2\3\0\1\u026a\117\0\1\u026b\115\0\1\u021c\104\0"
			+ "\1\u01b7\112\0\1\u014f\120\0\1\u01b4\124\0\1\u026c\100\0"
			+ "\1\u026d\115\0\1\u0214\107\0\1\u014f\115\0\1\u026e\112\0"
			+ "\1\u026f\112\0\1\u0224\124\0\1\u0203\103\0\1\u0270\41\0"
			+ "\26\u0258\1\u01b4\65\u0258\104\0\1\u0271\7\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\12\24\1\u0272\13\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\12\24\1\260" + "\13\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\12\24\1\u0273\13\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\5\24\1\u0118"
			+ "\20\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0" + "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0"
			+ "\1\24\1\21\14\24\1\u0274\11\24\5\0\4\24\3\0" + "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202"
			+ "\2\24\2\0\4\24\20\0\1\24\1\21\3\24\1\u018d" + "\22\24\5\0\4\24\3\0\3\24\1\0\1\21\2\0"
			+ "\6\24\1\0\1\21\1\202\2\24\2\0\4\24\20\0" + "\1\24\1\21\6\24\1\u013d\17\24\5\0\4\24\3\0"
			+ "\3\24\1\0\1\21\2\0\6\24\1\0\1\21\1\202" + "\2\24\2\0\4\24\20\0\1\24\1\21\12\24\1\265"
			+ "\13\24\5\0\4\24\3\0\3\24\63\0\1\u0265\104\0" + "\1\u0214\127\0\1\u01b4\114\0\1\u01b4\100\0\1\u0264\111\0"
			+ "\1\u01c8\114\0\1\u0275\47\0\1\u0276\162\0\1\u0277\102\0"
			+ "\1\u01b5\113\0\1\u026e\116\0\1\u0278\113\0\1\u0264\120\0"
			+ "\1\u0279\140\0\1\u027a\10\0\1\21\2\0\6\24\1\0" + "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21"
			+ "\10\24\1\u027b\15\24\5\0\4\24\3\0\3\24\1\0" + "\1\21\2\0\6\24\1\0\1\21\1\202\2\24\2\0"
			+ "\4\24\20\0\1\24\1\21\3\24\1\u0115\22\24\5\0" + "\4\24\3\0\3\24\1\0\1\21\2\0\6\24\1\0"
			+ "\1\21\1\202\2\24\2\0\4\24\20\0\1\24\1\21" + "\1\u025f\25\24\5\0\4\24\3\0\3\24\51\0\1\u01cf"
			+ "\116\0\1\u027c\121\0\1\u0214\106\0\1\u01ce\105\0\1\u027d" + "\145\0\1\u027e\13\0\1\21\2\0\6\24\1\0\1\21"
			+ "\1\202\2\24\2\0\4\24\20\0\1\24\1\21\26\24" + "\5\0\4\24\3\0\1\u0260\2\24\52\0\1\u027f\117\0"
			+ "\1\u0258\106\0\1\u01b4\11\0\1\u021b\31\0";

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;

	static {
		TypeScriptTokenMaker.e4xSupported = true;
	}

	/**
	 * Returns whether e4x is being highlighted.
	 *
	 * @return Whether e4x is being highlighted.
	 * @see #setE4xSupported(boolean)
	 */
	public static boolean isE4xSupported() {
		return TypeScriptTokenMaker.e4xSupported;
	}

	/**
	 * Sets whether e4x should be highlighted. A repaint should be forced on all
	 * <code>RSyntaxTextArea</code>s editing JavaScript if this property is changed
	 * to see the difference.
	 *
	 * @param supported
	 *            Whether e4x should be highlighted.
	 * @see #isE4xSupported()
	 */
	public static void setE4xSupported(final boolean supported) {
		TypeScriptTokenMaker.e4xSupported = supported;
	}

	private static int[] zzUnpackAction() {
		final int[] result = new int[639];
		int offset = 0;
		offset = TypeScriptTokenMaker.zzUnpackAction(TypeScriptTokenMaker.ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		final int[] result = new int[639];
		int offset = 0;
		offset = TypeScriptTokenMaker.zzUnpackAttribute(TypeScriptTokenMaker.ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(final String packed) {
		final char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 172) {
			int count = packed.charAt(i++);
			final char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	private static int[] zzUnpackRowMap() {
		final int[] result = new int[639];
		int offset = 0;
		offset = TypeScriptTokenMaker.zzUnpackRowMap(TypeScriptTokenMaker.ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			final int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static int[] zzUnpackTrans() {
		final int[] result = new int[43244];
		int offset = 0;
		offset = TypeScriptTokenMaker.zzUnpackTrans(TypeScriptTokenMaker.ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Whether we're in an internal DTD. Only valid if in an e4x DTD.
	 */
	private boolean e4x_inInternalDtd;

	/**
	 * The previous e4x state. Only valid if in an e4x state.
	 */
	private int e4x_prevState;

	/**
	 * When in the JS_STRING state, whether the current string is valid.
	 */
	private boolean validJSString;

	private Stack<Boolean> varDepths;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/**
	 * this buffer contains the current text to be matched and is the source of the
	 * yytext() string
	 */
	private char zzBuffer[];

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** the current lexical state */
	private int zzLexicalState = TypeScriptTokenMaker.YYINITIAL;

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the input device */
	private java.io.Reader zzReader;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/** the current state of the DFA */
	private int zzState;

	/**
	 * Constructor. This must be here because JFlex does not generate a no-parameter
	 * constructor.
	 */
	public TypeScriptTokenMaker() {
		super();
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public TypeScriptTokenMaker(final java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public TypeScriptTokenMaker(final java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Adds the token specified to the current linked list of tokens as an "end
	 * token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addEndToken(final int tokenType) {
		this.addToken(this.zzMarkedPos, this.zzMarkedPos, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(final int start, final int end, final int tokenType) {
		final int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start, end, tokenType, so, true);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array
	 *            The character array.
	 * @param start
	 *            The starting offset in the array.
	 * @param end
	 *            The ending offset in the array.
	 * @param tokenType
	 *            The token's type.
	 * @param startOffset
	 *            The offset in the document at which this token occurs.
	 */
	@Override
	public void addToken(final char[] array, final int start, final int end, final int tokenType,
			final int startOffset) {
		super.addToken(array, start, end, tokenType, startOffset);
		this.zzStartRead = this.zzMarkedPos;
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addToken(final int tokenType) {
		this.addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addToken(final int start, final int end, final int tokenType) {
		final int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start, end, tokenType, so);
	}

	/**
	 * Returns the closest {@link TokenTypes} "standard" token type for a given
	 * "internal" token type (e.g. one whose value is <code>&lt; 0</code>).
	 */
	@Override
	public int getClosestStandardTokenTypeForInternalType(final int type) {
		switch (type) {
		case INTERNAL_IN_JS_MLC:
			return TokenTypes.COMMENT_MULTILINE;
		case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
			return TokenTypes.COMMENT_DOCUMENTATION;
		case INTERNAL_IN_JS_STRING_INVALID:
		case INTERNAL_IN_JS_STRING_VALID:
		case INTERNAL_IN_JS_CHAR_INVALID:
		case INTERNAL_IN_JS_CHAR_VALID:
			return TokenTypes.LITERAL_STRING_DOUBLE_QUOTE;
		case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
			return TokenTypes.LITERAL_BACKQUOTE;
		case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
			return TokenTypes.ERROR_STRING_DOUBLE;
		}
		return type;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(final int languageIndex) {
		return new String[] { "//", null };
	}

	/**
	 * Returns the first token in the linked list of tokens generated from
	 * <code>text</code>. This method must be implemented by subclasses so they can
	 * correctly implement syntax highlighting.
	 *
	 * @param text
	 *            The text from which to get tokens.
	 * @param initialTokenType
	 *            The token type we should start with.
	 * @param startOffset
	 *            The offset into the document at which <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing the syntax
	 *         highlighted text.
	 */
	@Override
	public Token getTokenList(final Segment text, final int initialTokenType, final int startOffset) {

		this.resetTokenList();
		this.offsetShift = -text.offset + startOffset;
		this.validJSString = true;
		this.e4x_prevState = TypeScriptTokenMaker.YYINITIAL;
		this.e4x_inInternalDtd = false;
		int languageIndex = TypeScriptTokenMaker.LANG_INDEX_DEFAULT;

		// Start off in the proper state.
		int state = TypeScriptTokenMaker.YYINITIAL;
		switch (initialTokenType) {
		case INTERNAL_IN_JS_MLC:
			state = TypeScriptTokenMaker.JS_MLC;
			break;
		case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
			state = TypeScriptTokenMaker.JS_DOCCOMMENT;
			this.start = text.offset;
			break;
		case INTERNAL_IN_JS_STRING_INVALID:
			state = TypeScriptTokenMaker.JS_STRING;
			this.validJSString = false;
			break;
		case INTERNAL_IN_JS_STRING_VALID:
			state = TypeScriptTokenMaker.JS_STRING;
			break;
		case INTERNAL_IN_JS_CHAR_INVALID:
			state = TypeScriptTokenMaker.JS_CHAR;
			this.validJSString = false;
			break;
		case INTERNAL_IN_JS_CHAR_VALID:
			state = TypeScriptTokenMaker.JS_CHAR;
			break;
		case INTERNAL_E4X:
			state = TypeScriptTokenMaker.E4X;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_E4X_INTAG:
			state = TypeScriptTokenMaker.E4X_INTAG;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION:
			state = TypeScriptTokenMaker.E4X_PI;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_E4X_DTD:
			state = TypeScriptTokenMaker.E4X_DTD;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_E4X_DTD_INTERNAL:
			state = TypeScriptTokenMaker.E4X_DTD;
			this.e4x_inInternalDtd = true;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_E4X_ATTR_SINGLE:
			state = TypeScriptTokenMaker.E4X_INATTR_SINGLE;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_E4X_ATTR_DOUBLE:
			state = TypeScriptTokenMaker.E4X_INATTR_DOUBLE;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_E4X_MARKUP_CDATA:
			state = TypeScriptTokenMaker.E4X_CDATA;
			languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			break;
		case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:
			state = TypeScriptTokenMaker.JS_TEMPLATE_LITERAL;
			this.validJSString = true;
			break;
		case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:
			state = TypeScriptTokenMaker.JS_TEMPLATE_LITERAL;
			this.validJSString = false;
			break;
		default:
			if (initialTokenType < -1024) { // INTERNAL_IN_E4X_COMMENT - prevState
				final int main = -(-initialTokenType & 0xffffff00);
				switch (main) {
				default: // Should never happen
				case INTERNAL_IN_E4X_COMMENT:
					state = TypeScriptTokenMaker.E4X_COMMENT;
					break;
				}
				this.e4x_prevState = -initialTokenType & 0xff;
				languageIndex = TypeScriptTokenMaker.LANG_INDEX_E4X;
			} else
				state = TokenTypes.NULL;
		}

		this.setLanguageIndex(languageIndex);
		this.start = text.offset;
		this.s = text;
		try {
			this.yyreset(this.zzReader);
			this.yybegin(state);
			return this.yylex();
		} catch (final IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *            the new lexical state
	 */
	@Override
	public final void yybegin(final int newState) {
		this.zzLexicalState = newState;
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(final int pos) {
		return this.zzBuffer[this.zzStartRead + pos];
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		this.zzAtEOF = true; /* indicate end of file */
		this.zzEndRead = this.zzStartRead; /* invalidate buffer */

		if (this.zzReader != null)
			this.zzReader.close();
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return this.zzMarkedPos - this.zzStartRead;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = this.zzEndRead;
		char[] zzBufferL = this.zzBuffer;
		final char[] zzCMapL = TypeScriptTokenMaker.ZZ_CMAP;

		final int[] zzTransL = TypeScriptTokenMaker.ZZ_TRANS;
		final int[] zzRowMapL = TypeScriptTokenMaker.ZZ_ROWMAP;
		final int[] zzAttrL = TypeScriptTokenMaker.ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = this.zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;

			this.zzState = this.zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (this.zzAtEOF) {
						zzInput = TypeScriptTokenMaker.YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						this.zzCurrentPos = zzCurrentPosL;
						this.zzMarkedPos = zzMarkedPosL;
						final boolean eof = this.zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = this.zzCurrentPos;
						zzMarkedPosL = this.zzMarkedPos;
						zzBufferL = this.zzBuffer;
						zzEndReadL = this.zzEndRead;
						if (eof) {
							zzInput = TypeScriptTokenMaker.YYEOF;
							break zzForAction;
						} else
							zzInput = zzBufferL[zzCurrentPosL++];
					}
					final int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					this.zzState = zzNext;

					final int zzAttributes = zzAttrL[this.zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = this.zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			this.zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : TypeScriptTokenMaker.ZZ_ACTION[zzAction]) {
			case 35: {
				this.start = this.zzMarkedPos - 1;
				this.yybegin(TypeScriptTokenMaker.E4X_INATTR_SINGLE);
			}
			case 82:
				break;
			case 34: {
				this.start = this.zzMarkedPos - 1;
				this.yybegin(TypeScriptTokenMaker.E4X_INATTR_DOUBLE);
			}
			case 83:
				break;
			case 43: {
				this.addToken(TokenTypes.ERROR_NUMBER_FORMAT);
			}
			case 84:
				break;
			case 80: {
				this.addToken(TokenTypes.RESERVED_WORD_2);
			}
			case 85:
				break;
			case 27: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_DTD);
				this.addEndToken(this.e4x_inInternalDtd ? TypeScriptTokenMaker.INTERNAL_E4X_DTD_INTERNAL
						: TypeScriptTokenMaker.INTERNAL_E4X_DTD);
				return this.firstToken;
			}
			case 86:
				break;
			case 40: {
				final int type = this.validJSString ? TokenTypes.LITERAL_BACKQUOTE : TokenTypes.ERROR_STRING_DOUBLE;
				this.addToken(this.start, this.zzStartRead, type);
				this.yybegin(TypeScriptTokenMaker.YYINITIAL);
			}
			case 87:
				break;
			case 16: { /* Line ending in '\' => continue to next line. */
				if (this.validJSString) {
					this.addToken(this.start, this.zzStartRead, TokenTypes.LITERAL_CHAR);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_CHAR_VALID);
				} else {
					this.addToken(this.start, this.zzStartRead, TokenTypes.ERROR_CHAR);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_CHAR_INVALID);
				}
				return this.firstToken;
			}
			case 88:
				break;
			case 3: {
				this.addToken(TokenTypes.WHITESPACE);
			}
			case 89:
				break;
			case 18: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_MULTILINE);
				this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_MLC);
				return this.firstToken;
			}
			case 90:
				break;
			case 48: {
				final int start = this.zzStartRead;
				final int operatorLen = this.yycharat(0) == '+' ? 2 : 1;
				final int yylen = this.yylength(); // Cache before first addToken() invalidates it
				// System.out.println("'" + yytext() + "': " + yylength() + ", " +
				// (operatorLen+1));
				this.addToken(this.zzStartRead, this.zzStartRead + operatorLen - 1, TokenTypes.OPERATOR);
				if (yylen > operatorLen + 1)
					// System.out.println((start+operatorLen) + ", " + (zzMarkedPos-2));
					this.addToken(start + operatorLen, this.zzMarkedPos - 2, TokenTypes.WHITESPACE);
				this.zzStartRead = this.zzCurrentPos = this.zzMarkedPos = this.zzMarkedPos - 1;
				if (TypeScriptTokenMaker.isE4xSupported())
					// Scanning will continue with "<" as markup tag start
					this.yybegin(TypeScriptTokenMaker.E4X, TypeScriptTokenMaker.LANG_INDEX_E4X);
			}
			case 91:
				break;
			case 72: {
				this.addToken(TokenTypes.FUNCTION);
			}
			case 92:
				break;
			case 56: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_DOCUMENTATION);
				this.addToken(temp, this.zzMarkedPos - 1, TokenTypes.COMMENT_MARKUP);
				this.start = this.zzMarkedPos;
			}
			case 93:
				break;
			case 61: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.LITERAL_BACKQUOTE);
				this.start = this.zzMarkedPos - 2;
				if (this.varDepths == null)
					this.varDepths = new Stack<>();
				else
					this.varDepths.clear();
				this.varDepths.push(Boolean.TRUE);
				this.yybegin(TypeScriptTokenMaker.JS_TEMPLATE_LITERAL_EXPR);
			}
			case 94:
				break;
			case 42: {
				if (!this.varDepths.empty()) {
					this.varDepths.pop();
					if (this.varDepths.empty()) {
						this.addToken(this.start, this.zzStartRead, TokenTypes.VARIABLE);
						this.start = this.zzMarkedPos;
						this.yybegin(TypeScriptTokenMaker.JS_TEMPLATE_LITERAL);
					}
				}
			}
			case 95:
				break;
			case 37: {
				if (this.validJSString) {
					this.addToken(this.start, this.zzStartRead - 1, TokenTypes.LITERAL_BACKQUOTE);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
				} else {
					this.addToken(this.start, this.zzStartRead - 1, TokenTypes.ERROR_STRING_DOUBLE);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
				}
				return this.firstToken;
			}
			case 96:
				break;
			case 39: { /* Skip valid '$' that is not part of template literal expression start */
			}
			case 97:
				break;
			case 11: {
				this.start = this.zzMarkedPos - 1;
				this.validJSString = true;
				this.yybegin(TypeScriptTokenMaker.JS_TEMPLATE_LITERAL);
			}
			case 98:
				break;
			case 51: { /* Skip all escaped chars. */
			}
			case 99:
				break;
			case 12: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.ERROR_STRING_DOUBLE);
				this.addNullToken();
				return this.firstToken;
			}
			case 100:
				break;
			case 77: {
				this.start = this.zzStartRead;
				this.e4x_prevState = this.zzLexicalState;
				this.yybegin(TypeScriptTokenMaker.E4X_COMMENT);
			}
			case 101:
				break;
			case 68: {
				final int temp = this.zzStartRead;
				this.yybegin(TypeScriptTokenMaker.E4X);
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_CDATA);
				this.addToken(temp, this.zzMarkedPos - 1, TokenTypes.MARKUP_CDATA_DELIMITER);
			}
			case 102:
				break;
			case 62: {
				this.varDepths.push(Boolean.TRUE);
			}
			case 103:
				break;
			case 66: {
				final int count = this.yylength();
				this.addToken(this.zzStartRead, this.zzStartRead + 1, TokenTypes.MARKUP_TAG_DELIMITER);
				this.addToken(this.zzMarkedPos - (count - 2), this.zzMarkedPos - 1, TokenTypes.MARKUP_TAG_NAME);
				this.yybegin(TypeScriptTokenMaker.E4X_INTAG);
			}
			case 104:
				break;
			case 53: {
				/* Invalid latin-1 character \xXX */ this.validJSString = false;
			}
			case 105:
				break;
			case 69: {
				this.addToken(TokenTypes.COMMENT_MULTILINE);
			}
			case 106:
				break;
			case 59: {
				this.start = this.zzMarkedPos - 2;
				this.yybegin(TypeScriptTokenMaker.E4X_PI);
			}
			case 107:
				break;
			case 36: {
				this.yybegin(TypeScriptTokenMaker.E4X_INTAG);
				this.addToken(this.start, this.zzStartRead, TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE);
			}
			case 108:
				break;
			case 14: {
				final int type = this.validJSString ? TokenTypes.LITERAL_STRING_DOUBLE_QUOTE
						: TokenTypes.ERROR_STRING_DOUBLE;
				this.addToken(this.start, this.zzStartRead, type);
				this.yybegin(TypeScriptTokenMaker.YYINITIAL);
			}
			case 109:
				break;
			case 20: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_EOL);
				this.addNullToken();
				return this.firstToken;
			}
			case 110:
				break;
			case 24: {
				this.yybegin(TypeScriptTokenMaker.YYINITIAL, TypeScriptTokenMaker.LANG_INDEX_DEFAULT);
				this.addToken(TokenTypes.IDENTIFIER);
			}
			case 111:
				break;
			case 52: {
				/* Invalid Unicode character \\uXXXX */ this.validJSString = false;
			}
			case 112:
				break;
			case 79: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_DTD);
				this.start = temp;
				this.e4x_prevState = this.zzLexicalState;
				this.yybegin(TypeScriptTokenMaker.E4X_COMMENT);
			}
			case 113:
				break;
			case 71: {
				if (TypeScriptTokenMaker.e4xSupported)
					this.addToken(TokenTypes.RESERVED_WORD);
				else
					this.addToken(TokenTypes.IDENTIFIER);
			}
			case 114:
				break;
			case 67: {
				final int temp = this.zzMarkedPos;
				this.addToken(this.start, this.zzStartRead + 2, TokenTypes.MARKUP_COMMENT);
				this.start = temp;
				this.yybegin(this.e4x_prevState);
			}
			case 115:
				break;
			case 7: {
				this.addToken(TokenTypes.OPERATOR);
			}
			case 116:
				break;
			case 60: {
				this.yybegin(TypeScriptTokenMaker.E4X);
				this.addToken(this.start, this.zzStartRead + 1, TokenTypes.MARKUP_PROCESSING_INSTRUCTION);
			}
			case 117:
				break;
			case 55: {
				this.yybegin(TypeScriptTokenMaker.YYINITIAL);
				this.addToken(this.start, this.zzStartRead + 1, TokenTypes.COMMENT_DOCUMENTATION);
			}
			case 118:
				break;
			case 19: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_DOCUMENTATION);
				this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_COMMENT_DOCUMENTATION);
				return this.firstToken;
			}
			case 119:
				break;
			case 26: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_PROCESSING_INSTRUCTION);
				this.addEndToken(TypeScriptTokenMaker.INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION);
				return this.firstToken;
			}
			case 120:
				break;
			case 5: {
				this.addToken(TokenTypes.IDENTIFIER);
			}
			case 121:
				break;
			case 73: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_MULTILINE);
				this.addHyperlinkToken(temp, this.zzMarkedPos - 1, TokenTypes.COMMENT_MULTILINE);
				this.start = this.zzMarkedPos;
			}
			case 122:
				break;
			case 49: {
				this.addToken(TypeScriptTokenMaker.isE4xSupported() ? TokenTypes.MARKUP_TAG_ATTRIBUTE
						: TokenTypes.ERROR_IDENTIFIER);
			}
			case 123:
				break;
			case 76: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_EOL);
				this.addHyperlinkToken(temp, this.zzMarkedPos - 1, TokenTypes.COMMENT_EOL);
				this.start = this.zzMarkedPos;
			}
			case 124:
				break;
			case 64: {
				this.start = this.zzMarkedPos - 3;
				this.yybegin(TypeScriptTokenMaker.JS_DOCCOMMENT);
			}
			case 125:
				break;
			case 9: {
				this.start = this.zzMarkedPos - 1;
				this.validJSString = true;
				this.yybegin(TypeScriptTokenMaker.JS_STRING);
			}
			case 126:
				break;
			case 58: {
				this.start = this.zzMarkedPos - 2;
				this.e4x_inInternalDtd = false;
				this.yybegin(TypeScriptTokenMaker.E4X_DTD);
			}
			case 127:
				break;
			case 38: {
				if (this.validJSString) {
					this.addToken(this.start, this.zzStartRead, TokenTypes.LITERAL_BACKQUOTE);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
				} else {
					this.addToken(this.start, this.zzStartRead, TokenTypes.ERROR_STRING_DOUBLE);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
				}
				return this.firstToken;
			}
			case 128:
				break;
			case 25: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
				this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_E4X_COMMENT - this.e4x_prevState);
				return this.firstToken;
			}
			case 129:
				break;
			case 10: {
				this.start = this.zzMarkedPos - 1;
				this.validJSString = true;
				this.yybegin(TypeScriptTokenMaker.JS_CHAR);
			}
			case 130:
				break;
			case 29: {
				this.e4x_inInternalDtd = true;
			}
			case 131:
				break;
			case 75: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_DOCUMENTATION);
				this.addHyperlinkToken(temp, this.zzMarkedPos - 1, TokenTypes.COMMENT_DOCUMENTATION);
				this.start = this.zzMarkedPos;
			}
			case 132:
				break;
			case 47: {
				this.start = this.zzMarkedPos - 2;
				this.yybegin(TypeScriptTokenMaker.JS_MLC);
			}
			case 133:
				break;
			case 45: {
				this.addToken(TokenTypes.LITERAL_NUMBER_HEXADECIMAL);
			}
			case 134:
				break;
			case 81: {
				this.addToken(TokenTypes.MARKUP_CDATA_DELIMITER);
				this.start = this.zzMarkedPos;
				this.yybegin(TypeScriptTokenMaker.E4X_CDATA);
			}
			case 135:
				break;
			case 32: {
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER); /* Not valid but we'll still accept it */
			}
			case 136:
				break;
			case 2: {
				this.addToken(TokenTypes.ERROR_IDENTIFIER);
			}
			case 137:
				break;
			case 78: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
				this.addHyperlinkToken(temp, this.zzMarkedPos - 1, TokenTypes.MARKUP_COMMENT);
				this.start = this.zzMarkedPos;
			}
			case 138:
				break;
			case 33: {
				this.yybegin(TypeScriptTokenMaker.E4X);
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER);
			}
			case 139:
				break;
			case 23: {
				this.addToken(TokenTypes.MARKUP_ENTITY_REFERENCE);
			}
			case 140:
				break;
			case 70: {
				this.addToken(TokenTypes.LITERAL_BOOLEAN);
			}
			case 141:
				break;
			case 4: {
				this.addNullToken();
				return this.firstToken;
			}
			case 142:
				break;
			case 50: {
				this.addToken(TokenTypes.RESERVED_WORD);
			}
			case 143:
				break;
			case 54: {
				this.yybegin(TypeScriptTokenMaker.YYINITIAL);
				this.addToken(this.start, this.zzStartRead + 1, TokenTypes.COMMENT_MULTILINE);
			}
			case 144:
				break;
			case 65: {
				this.addToken(TokenTypes.DATA_TYPE);
			}
			case 145:
				break;
			case 22: {
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER);
				this.yybegin(TypeScriptTokenMaker.E4X_INTAG);
			}
			case 146:
				break;
			case 8: {
				this.addToken(TokenTypes.SEPARATOR);
			}
			case 147:
				break;
			case 31: {
				this.addToken(TokenTypes.MARKUP_TAG_ATTRIBUTE);
			}
			case 148:
				break;
			case 74: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_DOCUMENTATION);
				this.addToken(temp, this.zzMarkedPos - 1, TokenTypes.COMMENT_KEYWORD);
				this.start = this.zzMarkedPos;
			}
			case 149:
				break;
			case 17: {
				final int type = this.validJSString ? TokenTypes.LITERAL_CHAR : TokenTypes.ERROR_CHAR;
				this.addToken(this.start, this.zzStartRead, type);
				this.yybegin(TypeScriptTokenMaker.YYINITIAL);
			}
			case 150:
				break;
			case 46: {
				this.start = this.zzMarkedPos - 2;
				this.yybegin(TypeScriptTokenMaker.JS_EOL_COMMENT);
			}
			case 151:
				break;
			case 21: {
				this.addEndToken(TypeScriptTokenMaker.INTERNAL_E4X);
				return this.firstToken;
			}
			case 152:
				break;
			case 13: { /* Line ending in '\' => continue to next line. */
				if (this.validJSString) {
					this.addToken(this.start, this.zzStartRead, TokenTypes.LITERAL_STRING_DOUBLE_QUOTE);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_STRING_VALID);
				} else {
					this.addToken(this.start, this.zzStartRead, TokenTypes.ERROR_STRING_DOUBLE);
					this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_STRING_INVALID);
				}
				return this.firstToken;
			}
			case 153:
				break;
			case 44: {
				this.addToken(TokenTypes.LITERAL_NUMBER_FLOAT);
			}
			case 154:
				break;
			case 57: {
				final int count = this.yylength();
				this.addToken(this.zzStartRead, this.zzStartRead, TokenTypes.MARKUP_TAG_DELIMITER);
				this.addToken(this.zzMarkedPos - (count - 1), this.zzMarkedPos - 1, TokenTypes.MARKUP_TAG_NAME);
				this.yybegin(TypeScriptTokenMaker.E4X_INTAG);
			}
			case 155:
				break;
			case 63: {
				boolean highlightedAsRegex = false;
				if (this.firstToken == null) {
					this.addToken(TokenTypes.REGEX);
					highlightedAsRegex = true;
				} else {
					// If this is *likely* to be a regex, based on
					// the previous token, highlight it as such.
					final Token t = this.firstToken.getLastNonCommentNonWhitespaceToken();
					if (RSyntaxUtilities.regexCanFollowInJavaScript(t)) {
						this.addToken(TokenTypes.REGEX);
						highlightedAsRegex = true;
					}
				}
				// If it doesn't *appear* to be a regex, highlight it as
				// individual tokens.
				if (!highlightedAsRegex) {
					final int temp = this.zzStartRead + 1;
					this.addToken(this.zzStartRead, this.zzStartRead, TokenTypes.OPERATOR);
					this.zzStartRead = this.zzCurrentPos = this.zzMarkedPos = temp;
				}
			}
			case 156:
				break;
			case 28: {
				if (!this.e4x_inInternalDtd) {
					this.yybegin(TypeScriptTokenMaker.E4X);
					this.addToken(this.start, this.zzStartRead, TokenTypes.MARKUP_DTD);
				}
			}
			case 157:
				break;
			case 6: {
				this.addToken(TokenTypes.LITERAL_NUMBER_DECIMAL_INT);
			}
			case 158:
				break;
			case 30: {
				this.e4x_inInternalDtd = false;
			}
			case 159:
				break;
			case 15: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.ERROR_CHAR);
				this.addNullToken();
				return this.firstToken;
			}
			case 160:
				break;
			case 41: { // TODO: This isn't right. The expression and its depth should continue to the
						// next line.
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.VARIABLE);
				this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
				return this.firstToken;
			}
			case 161:
				break;
			case 1: {
			}
			case 162:
				break;
			default:
				if (zzInput == TypeScriptTokenMaker.YYEOF && this.zzStartRead == this.zzCurrentPos) {
					this.zzAtEOF = true;
					switch (this.zzLexicalState) {
					case JS_STRING: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.ERROR_STRING_DOUBLE);
						this.addNullToken();
						return this.firstToken;
					}
					case 640:
						break;
					case E4X: {
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_E4X);
						return this.firstToken;
					}
					case 641:
						break;
					case E4X_INTAG: {
						this.addToken(this.start, this.zzStartRead - 1, TypeScriptTokenMaker.INTERNAL_E4X_INTAG);
						return this.firstToken;
					}
					case 642:
						break;
					case E4X_PI: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_PROCESSING_INSTRUCTION);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION);
						return this.firstToken;
					}
					case 643:
						break;
					case JS_MLC: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_MULTILINE);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_MLC);
						return this.firstToken;
					}
					case 644:
						break;
					case JS_CHAR: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.ERROR_CHAR);
						this.addNullToken();
						return this.firstToken;
					}
					case 645:
						break;
					case JS_EOL_COMMENT: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.COMMENT_EOL);
						this.addNullToken();
						return this.firstToken;
					}
					case 646:
						break;
					case E4X_COMMENT: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_E4X_COMMENT - this.e4x_prevState);
						return this.firstToken;
					}
					case 647:
						break;
					case JS_DOCCOMMENT: {
						this.yybegin(TypeScriptTokenMaker.YYINITIAL);
						this.addToken(this.start, this.zzEndRead, TokenTypes.COMMENT_DOCUMENTATION);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_COMMENT_DOCUMENTATION);
						return this.firstToken;
					}
					case 648:
						break;
					case E4X_DTD: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_DTD);
						this.addEndToken(this.e4x_inInternalDtd ? TypeScriptTokenMaker.INTERNAL_E4X_DTD_INTERNAL
								: TypeScriptTokenMaker.INTERNAL_E4X_DTD);
						return this.firstToken;
					}
					case 649:
						break;
					case JS_TEMPLATE_LITERAL: {
						if (this.validJSString) {
							this.addToken(this.start, this.zzStartRead - 1, TokenTypes.LITERAL_BACKQUOTE);
							this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID);
						} else {
							this.addToken(this.start, this.zzStartRead - 1, TokenTypes.ERROR_STRING_DOUBLE);
							this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
						}
						return this.firstToken;
					}
					case 650:
						break;
					case E4X_INATTR_SINGLE: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_E4X_ATTR_SINGLE);
						return this.firstToken;
					}
					case 651:
						break;
					case E4X_INATTR_DOUBLE: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_E4X_ATTR_DOUBLE);
						return this.firstToken;
					}
					case 652:
						break;
					case JS_TEMPLATE_LITERAL_EXPR: {
						// TODO: This isn't right. The expression and its depth should continue to the
						// next line.
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.VARIABLE);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID);
						return this.firstToken;
					}
					case 653:
						break;
					case YYINITIAL: {
						this.addNullToken();
						return this.firstToken;
					}
					case 654:
						break;
					case E4X_CDATA: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_CDATA);
						this.addEndToken(TypeScriptTokenMaker.INTERNAL_E4X_MARKUP_CDATA);
						return this.firstToken;
					}
					case 655:
						break;
					default:
						return null;
					}
				} else
					this.zzScanError(TypeScriptTokenMaker.ZZ_NO_MATCH);
			}
		}
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *            the number of characters to be read again. This number must not be
	 *            greater than yylength()!
	 */
	public void yypushback(final int number) {
		if (number > this.yylength())
			this.zzScanError(TypeScriptTokenMaker.ZZ_PUSHBACK_2BIG);

		this.zzMarkedPos -= number;
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>YY_INITIAL</tt>.
	 *
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(final Reader reader) {
		// 's' has been updated.
		this.zzBuffer = this.s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill no longer
		 * "refills" the buffer (since the way we do it, it's always "full" the first
		 * time through, since it points to the segment's array). So, we assign
		 * zzEndRead here.
		 */
		// zzStartRead = zzEndRead = s.offset;
		this.zzStartRead = this.s.offset;
		this.zzEndRead = this.zzStartRead + this.s.count - 1;
		this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
		this.zzLexicalState = TypeScriptTokenMaker.YYINITIAL;
		this.zzReader = reader;
		this.zzAtEOF = false;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return this.zzLexicalState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>true</code> if EOF was reached, otherwise <code>false</code>.
	 */
	private boolean zzRefill() {
		return this.zzCurrentPos >= this.s.offset + this.s.count;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(final int errorCode) {
		String message;
		try {
			message = TypeScriptTokenMaker.ZZ_ERROR_MSG[errorCode];
		} catch (final ArrayIndexOutOfBoundsException e) {
			message = TypeScriptTokenMaker.ZZ_ERROR_MSG[TypeScriptTokenMaker.ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

}
