/* The following code was generated by JFlex 1.4.1 on 7/9/16 6:48 PM */

/*
 * 04/12/2012
 *
 * DtdTokenMaker.java - Generates tokens for DTD syntax highlighting.
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.IOException;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;
import org.fife.ui.rsyntaxtextarea.TokenTypes;

/**
 * Scanner for DTD files.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance. Memory allocation needs to be almost completely
 * removed to be competitive with the handwritten lexers (subclasses of
 * <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around). We can
 * achieve this because RText always scans exactly 1 line of tokens at a time,
 * and hands the scanner this line as an array of characters (a Segment really).
 * Since tokens contain pointers to char arrays instead of Strings holding their
 * contents, there is no need for allocating new memory for Strings.
 * <p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.
 * <p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 * <li>The generated <code>XMLTokenMaker.java</code> file will contain two
 * definitions of both <code>zzRefill</code> and <code>yyreset</code>. You
 * should hand-delete the second of each definition (the ones generated by the
 * lexer), as these generated methods modify the input buffer, which we'll never
 * have to do.</li>
 * <li>You should also change the declaration/definition of zzBuffer to NOT be
 * initialized. This is a needless memory allocation for us since we will be
 * pointing the array somewhere else anyway.</li>
 * <li>You should NOT call <code>yylex()</code> on the generated scanner
 * directly; rather, you should use <code>getTokenList</code> as you would with
 * any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 1.0
 */

public class DtdTokenMaker extends AbstractJFlexTokenMaker {

	public static final int COMMENT = 1;

	public static final int INTAG_ATTLIST = 4;
	public static final int INTAG_ELEMENT = 3;
	/** lexical states */
	public static final int INTAG_START = 2;
	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * comment. The state to return to when this comment ends is embedded in the
	 * token type as well.
	 */
	public static final int INTERNAL_IN_COMMENT = -(1 << 11);
	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed,
	 * locally-defined DTD in a DOCTYPE element.
	 */
	public static final int INTERNAL_INTAG_ATTLIST = -3;

	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * DOCTYPE element.
	 */
	public static final int INTERNAL_INTAG_ELEMENT = -2;

	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * XML tag; thus a new line is beginning still inside of the tag.
	 */
	public static final int INTERNAL_INTAG_START = -1;

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	public static final int YYINITIAL = 0;

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = DtdTokenMaker.zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\5\0\1\1\1\2\1\3\1\4\1\5\4\4\1\3"
			+ "\1\6\2\3\2\7\2\10\2\7\1\11\5\0\2\3" + "\1\10\3\7\5\0\1\12\2\3\3\7\1\13\2\0"
			+ "\1\14\2\3\3\7\2\0\2\3\1\15\2\7\2\3" + "\2\7\1\16\1\17\1\7";

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = DtdTokenMaker.zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\5\0\4\1\1\11\5\1\1\11\11\1\5\0\2\1"
			+ "\1\11\3\1\5\0\1\11\5\1\1\11\2\0\6\1" + "\2\0\14\1";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = DtdTokenMaker.zzUnpackCMap(DtdTokenMaker.ZZ_CMAP_PACKED);

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\1\1\2\1\0\1\1\23\0\1\1\1\24\1\3\1\41"
			+ "\1\7\1\5\1\5\1\4\5\5\1\25\1\22\1\6\12\7\1\20" + "\1\5\1\23\1\5\1\26\2\5\1\34\1\7\1\37\1\40\1\27"
			+ "\3\7\1\35\2\7\1\30\1\31\1\32\1\7\1\42\1\44\1\43" + "\1\36\1\33\1\45\5\7\1\5\1\0\1\5\1\0\1\5\1\0"
			+ "\4\7\1\17\1\14\1\7\1\10\1\15\2\7\1\16\3\7\1\12" + "\2\7\1\13\1\11\2\7\1\21\3\7\3\0\1\5\uff81\0";

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	private static final int ZZ_NO_MATCH = 1;

	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = DtdTokenMaker.zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"
			+ "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u0156"
			+ "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"
			+ "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"
			+ "\0\u0156\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e"
			+ "\0\u05a4\0\u0156\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0156"
			+ "\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792"
			+ "\0\u07b8\0\u06d4\0\u07de\0\u0804\0\u02ac\0\u082a\0\u0850\0\u0876"
			+ "\0\u089c\0\u08c2\0\u08e8\0\u0214\0\u0214\0\u090e";
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = DtdTokenMaker.zzUnpackTrans();
	private static final String ZZ_TRANS_PACKED_0 = "\1\6\1\7\21\6\1\10\22\6\2\11\1\12\5\11"
			+ "\1\13\3\11\1\14\4\11\1\15\3\11\1\16\20\11" + "\1\17\1\7\24\17\1\20\1\21\4\17\1\22\11\17"
			+ "\1\23\1\7\24\23\1\20\17\23\1\24\1\7\1\24" + "\1\25\1\26\21\24\1\20\10\24\1\27\1\24\1\30"
			+ "\4\24\1\6\1\0\21\6\1\0\22\6\1\0\1\7" + "\70\0\1\31\21\0\2\11\1\0\5\11\1\0\3\11"
			+ "\1\0\4\11\1\0\3\11\1\0\20\11\57\0\1\32" + "\45\0\1\33\3\0\1\34\51\0\1\35\51\0\1\36"
			+ "\20\0\1\17\1\0\24\17\1\0\20\17\1\0\24\17" + "\1\0\1\17\1\37\16\17\1\0\24\17\1\0\4\17"
			+ "\1\40\12\17\1\23\1\0\24\23\1\0\17\23\1\24" + "\1\0\1\24\2\0\21\24\1\0\17\24\3\25\1\41"
			+ "\42\25\4\26\1\41\41\26\1\24\1\0\1\24\2\0" + "\21\24\1\0\11\24\1\42\6\24\1\0\1\24\2\0"
			+ "\21\24\1\0\6\24\1\43\5\24\1\44\2\24\25\0" + "\1\45\31\0\1\46\46\0\1\47\51\0\1\50\50\0"
			+ "\1\51\52\0\1\52\17\0\1\17\1\0\24\17\1\0" + "\1\53\17\17\1\0\24\17\1\0\4\17\1\54\12\17"
			+ "\1\24\1\0\1\24\2\0\21\24\1\0\5\24\1\55" + "\12\24\1\0\1\24\2\0\21\24\1\0\2\24\1\56"
			+ "\15\24\1\0\1\24\2\0\21\24\1\0\1\57\16\24" + "\25\0\1\60\32\0\1\61\53\0\1\62\44\0\1\47"
			+ "\50\0\1\63\23\0\1\17\1\0\24\17\1\0\2\17" + "\1\64\15\17\1\0\24\17\1\0\1\17\1\65\15\17"
			+ "\1\24\1\0\1\24\2\0\21\24\1\0\4\24\1\66" + "\13\24\1\0\1\24\2\0\21\24\1\0\13\24\1\67"
			+ "\4\24\1\0\1\24\2\0\21\24\1\0\15\24\1\70" + "\1\24\13\0\1\47\4\0\1\62\33\0\1\71\43\0"
			+ "\2\72\12\63\1\72\1\63\1\72\1\0\2\72\1\0" + "\12\63\1\72\4\63\1\17\1\0\24\17\1\0\1\73"
			+ "\17\17\1\0\24\17\1\0\6\17\1\74\10\17\1\24" + "\1\0\1\24\2\0\21\24\1\0\5\24\1\75\12\24"
			+ "\1\0\1\24\2\0\21\24\1\0\1\24\1\76\16\24" + "\1\0\1\24\2\0\21\24\1\0\16\24\1\77\6\0"
			+ "\1\63\37\0\1\17\1\0\24\17\1\0\3\17\1\100" + "\14\17\1\0\24\17\1\0\7\17\1\101\7\17\1\24"
			+ "\1\0\1\24\2\0\21\24\1\0\6\24\1\102\11\24" + "\1\0\1\24\2\0\21\24\1\0\6\24\1\103\10\24"
			+ "\1\17\1\0\24\17\1\0\4\17\1\104\13\17\1\0" + "\24\17\1\0\4\17\1\105\12\17\1\24\1\0\1\24"
			+ "\2\0\21\24\1\0\1\106\17\24\1\0\1\24\2\0" + "\21\24\1\0\14\24\1\102\3\24\1\0\1\24\2\0"
			+ "\21\24\1\0\11\24\1\75\5\24";

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;

	private static int[] zzUnpackAction() {
		final int[] result = new int[70];
		int offset = 0;
		offset = DtdTokenMaker.zzUnpackAction(DtdTokenMaker.ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		final int[] result = new int[70];
		int offset = 0;
		offset = DtdTokenMaker.zzUnpackAttribute(DtdTokenMaker.ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(final String packed) {
		final char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 138) {
			int count = packed.charAt(i++);
			final char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	private static int[] zzUnpackRowMap() {
		final int[] result = new int[70];
		int offset = 0;
		offset = DtdTokenMaker.zzUnpackRowMap(DtdTokenMaker.ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			final int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static int[] zzUnpackTrans() {
		final int[] result = new int[2356];
		int offset = 0;
		offset = DtdTokenMaker.zzUnpackTrans(DtdTokenMaker.ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * The state we were in prior to the current one. This is used to know what
	 * state to resume after an MLC ends.
	 */
	private int prevState;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/**
	 * this buffer contains the current text to be matched and is the source of the
	 * yytext() string
	 */
	private char zzBuffer[];

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/* user code: */

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** the current lexical state */
	private int zzLexicalState = DtdTokenMaker.YYINITIAL;

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the input device */
	private java.io.Reader zzReader;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/** the current state of the DFA */
	private int zzState;

	/**
	 * Constructor. This must be here because JFlex does not generate a no-parameter
	 * constructor.
	 */
	public DtdTokenMaker() {
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public DtdTokenMaker(final java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public DtdTokenMaker(final java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Adds the token specified to the current linked list of tokens as an "end
	 * token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addEndToken(final int tokenType) {
		this.addToken(this.zzMarkedPos, this.zzMarkedPos, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(final int start, final int end, final int tokenType) {
		final int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start, end, tokenType, so, true);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array
	 *            The character array.
	 * @param start
	 *            The starting offset in the array.
	 * @param end
	 *            The ending offset in the array.
	 * @param tokenType
	 *            The token's type.
	 * @param startOffset
	 *            The offset in the document at which this token occurs.
	 */
	@Override
	public void addToken(final char[] array, final int start, final int end, final int tokenType,
			final int startOffset) {
		super.addToken(array, start, end, tokenType, startOffset);
		this.zzStartRead = this.zzMarkedPos;
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addToken(final int tokenType) {
		this.addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addToken(final int start, final int end, final int tokenType) {
		final int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start, end, tokenType, so);
	}

	/**
	 * Always returns <tt>false</tt>, as you never want "mark occurrences" working
	 * in XML files.
	 *
	 * @param type
	 *            The token type.
	 * @return Whether tokens of this type should have "mark occurrences" enabled.
	 */
	@Override
	public boolean getMarkOccurrencesOfTokenType(final int type) {
		return false;
	}

	/**
	 * Returns the first token in the linked list of tokens generated from
	 * <code>text</code>. This method must be implemented by subclasses so they can
	 * correctly implement syntax highlighting.
	 *
	 * @param text
	 *            The text from which to get tokens.
	 * @param initialTokenType
	 *            The token type we should start with.
	 * @param startOffset
	 *            The offset into the document at which <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing the syntax
	 *         highlighted text.
	 */
	@Override
	public Token getTokenList(final Segment text, final int initialTokenType, final int startOffset) {

		this.resetTokenList();
		this.offsetShift = -text.offset + startOffset;
		this.prevState = DtdTokenMaker.YYINITIAL;

		// Start off in the proper state.
		int state = DtdTokenMaker.YYINITIAL;
		switch (initialTokenType) {
		case INTERNAL_INTAG_START:
			state = DtdTokenMaker.INTAG_START;
			break;
		case INTERNAL_INTAG_ELEMENT:
			state = DtdTokenMaker.INTAG_ELEMENT;
			break;
		case INTERNAL_INTAG_ATTLIST:
			state = DtdTokenMaker.INTAG_ATTLIST;
			break;
		default:
			if (initialTokenType < -1024) { // INTERNAL_IN_COMMENT - prevState
				final int main = -(-initialTokenType & 0xffffff00);
				switch (main) {
				default: // Should never happen
				case INTERNAL_IN_COMMENT:
					state = DtdTokenMaker.COMMENT;
					break;
				}
				this.prevState = -initialTokenType & 0xff;
			} else
				state = DtdTokenMaker.YYINITIAL;
		}

		this.start = text.offset;
		this.s = text;
		try {
			this.yyreset(this.zzReader);
			this.yybegin(state);
			return this.yylex();
		} catch (final IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *            the new lexical state
	 */
	@Override
	public final void yybegin(final int newState) {
		this.zzLexicalState = newState;
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(final int pos) {
		return this.zzBuffer[this.zzStartRead + pos];
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		this.zzAtEOF = true; /* indicate end of file */
		this.zzEndRead = this.zzStartRead; /* invalidate buffer */

		if (this.zzReader != null)
			this.zzReader.close();
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return this.zzMarkedPos - this.zzStartRead;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = this.zzEndRead;
		char[] zzBufferL = this.zzBuffer;
		final char[] zzCMapL = DtdTokenMaker.ZZ_CMAP;

		final int[] zzTransL = DtdTokenMaker.ZZ_TRANS;
		final int[] zzRowMapL = DtdTokenMaker.ZZ_ROWMAP;
		final int[] zzAttrL = DtdTokenMaker.ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = this.zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;

			this.zzState = this.zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (this.zzAtEOF) {
						zzInput = DtdTokenMaker.YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						this.zzCurrentPos = zzCurrentPosL;
						this.zzMarkedPos = zzMarkedPosL;
						final boolean eof = this.zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = this.zzCurrentPos;
						zzMarkedPosL = this.zzMarkedPos;
						zzBufferL = this.zzBuffer;
						zzEndReadL = this.zzEndRead;
						if (eof) {
							zzInput = DtdTokenMaker.YYEOF;
							break zzForAction;
						} else
							zzInput = zzBufferL[zzCurrentPosL++];
					}
					final int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					this.zzState = zzNext;

					final int zzAttributes = zzAttrL[this.zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = this.zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			this.zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : DtdTokenMaker.ZZ_ACTION[zzAction]) {
			case 3: {
				this.addToken(TokenTypes.IDENTIFIER);
			}
			case 16:
				break;
			case 2: {
				this.addToken(TokenTypes.WHITESPACE);
			}
			case 17:
				break;
			case 1: {
				/* Not really valid */ this.addToken(TokenTypes.IDENTIFIER);
			}
			case 18:
				break;
			case 12: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
				this.addHyperlinkToken(temp, this.zzMarkedPos - 1, TokenTypes.MARKUP_COMMENT);
				this.start = this.zzMarkedPos;
			}
			case 19:
				break;
			case 9: {
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER);
				this.yybegin(DtdTokenMaker.INTAG_START);
			}
			case 20:
				break;
			case 6: {
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER);
				this.yybegin(DtdTokenMaker.YYINITIAL);
			}
			case 21:
				break;
			case 10: {
				final int temp = this.zzMarkedPos;
				this.addToken(this.start, this.zzStartRead + 2, TokenTypes.MARKUP_COMMENT);
				this.start = temp;
				this.yybegin(this.prevState);
			}
			case 22:
				break;
			case 11: {
				this.start = this.zzStartRead;
				this.prevState = this.zzLexicalState;
				this.yybegin(DtdTokenMaker.COMMENT);
			}
			case 23:
				break;
			case 7: {
				this.addToken(TokenTypes.MARKUP_TAG_ATTRIBUTE);
			}
			case 24:
				break;
			case 15: {
				this.addToken(TokenTypes.MARKUP_TAG_NAME);
				this.yybegin(DtdTokenMaker.INTAG_ATTLIST);
			}
			case 25:
				break;
			case 14: {
				this.addToken(TokenTypes.MARKUP_TAG_NAME);
				this.yybegin(DtdTokenMaker.INTAG_ELEMENT);
			}
			case 26:
				break;
			case 13: {
				this.addToken(TokenTypes.MARKUP_PROCESSING_INSTRUCTION);
			}
			case 27:
				break;
			case 4: {
			}
			case 28:
				break;
			case 5: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
				this.addEndToken(DtdTokenMaker.INTERNAL_IN_COMMENT - this.prevState);
				return this.firstToken;
			}
			case 29:
				break;
			case 8: {
				this.addToken(TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE);
			}
			case 30:
				break;
			default:
				if (zzInput == DtdTokenMaker.YYEOF && this.zzStartRead == this.zzCurrentPos) {
					this.zzAtEOF = true;
					switch (this.zzLexicalState) {
					case INTAG_START: {
						this.addEndToken(DtdTokenMaker.INTERNAL_INTAG_START);
						return this.firstToken;
					}
					case 71:
						break;
					case INTAG_ELEMENT: {
						this.addEndToken(DtdTokenMaker.INTERNAL_INTAG_ELEMENT);
						return this.firstToken;
					}
					case 72:
						break;
					case YYINITIAL: {
						this.addNullToken();
						return this.firstToken;
					}
					case 73:
						break;
					case INTAG_ATTLIST: {
						this.addEndToken(DtdTokenMaker.INTERNAL_INTAG_ATTLIST);
						return this.firstToken;
					}
					case 74:
						break;
					case COMMENT: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
						this.addEndToken(DtdTokenMaker.INTERNAL_IN_COMMENT - this.prevState);
						return this.firstToken;
					}
					case 75:
						break;
					default:
						return null;
					}
				} else
					this.zzScanError(DtdTokenMaker.ZZ_NO_MATCH);
			}
		}
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *            the number of characters to be read again. This number must not be
	 *            greater than yylength()!
	 */
	public void yypushback(final int number) {
		if (number > this.yylength())
			this.zzScanError(DtdTokenMaker.ZZ_PUSHBACK_2BIG);

		this.zzMarkedPos -= number;
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>YY_INITIAL</tt>.
	 *
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(final java.io.Reader reader) {
		// 's' has been updated.
		this.zzBuffer = this.s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill no longer
		 * "refills" the buffer (since the way we do it, it's always "full" the first
		 * time through, since it points to the segment's array). So, we assign
		 * zzEndRead here.
		 */
		// zzStartRead = zzEndRead = s.offset;
		this.zzStartRead = this.s.offset;
		this.zzEndRead = this.zzStartRead + this.s.count - 1;
		this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
		this.zzLexicalState = DtdTokenMaker.YYINITIAL;
		this.zzReader = reader;
		this.zzAtEOF = false;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return this.zzLexicalState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>true</code> if EOF was reached, otherwise <code>false</code>.
	 */
	private boolean zzRefill() {
		return this.zzCurrentPos >= this.s.offset + this.s.count;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(final int errorCode) {
		String message;
		try {
			message = DtdTokenMaker.ZZ_ERROR_MSG[errorCode];
		} catch (final ArrayIndexOutOfBoundsException e) {
			message = DtdTokenMaker.ZZ_ERROR_MSG[DtdTokenMaker.ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

}
