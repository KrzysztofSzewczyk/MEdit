/* The following code was generated by JFlex 1.4.1 on 3/22/13 6:51 PM */

/*
 * 01/24/2005
 *
 * XMLTokenMaker.java - Generates tokens for XML syntax highlighting.
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.IOException;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.OccurrenceMarker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;
import org.fife.ui.rsyntaxtextarea.TokenTypes;
import org.fife.ui.rsyntaxtextarea.XmlOccurrenceMarker;

/**
 * Scanner for XML.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance. Memory allocation needs to be almost completely
 * removed to be competitive with the handwritten lexers (subclasses of
 * <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around). We can
 * achieve this because RText always scans exactly 1 line of tokens at a time,
 * and hands the scanner this line as an array of characters (a Segment really).
 * Since tokens contain pointers to char arrays instead of Strings holding their
 * contents, there is no need for allocating new memory for Strings.
 * <p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.
 * <p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 * <li>The generated <code>XMLTokenMaker.java</code> file will contain two
 * definitions of both <code>zzRefill</code> and <code>yyreset</code>. You
 * should hand-delete the second of each definition (the ones generated by the
 * lexer), as these generated methods modify the input buffer, which we'll never
 * have to do.</li>
 * <li>You should also change the declaration/definition of zzBuffer to NOT be
 * initialized. This is a needless memory allocation for us since we will be
 * pointing the array somewhere else anyway.</li>
 * <li>You should NOT call <code>yylex()</code> on the generated scanner
 * directly; rather, you should use <code>getTokenList</code> as you would with
 * any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class XMLTokenMaker extends AbstractMarkupTokenMaker {

	public static final int CDATA = 7;

	public static final int COMMENT = 1;
	/**
	 * Whether closing markup tags are automatically completed for HTML.
	 */
	private static boolean completeCloseTags;
	public static final int DTD = 3;
	public static final int INATTR_DOUBLE = 5;
	public static final int INATTR_SINGLE = 6;
	/** lexical states */
	public static final int INTAG = 4;
	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * double-quote attribute.
	 */
	public static final int INTERNAL_ATTR_DOUBLE = -1;
	/**
	 * Type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * single-quote attribute.
	 */
	public static final int INTERNAL_ATTR_SINGLE = -2;

	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * DOCTYPE element.
	 */
	public static final int INTERNAL_DTD = -4;

	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed,
	 * locally-defined DTD in a DOCTYPE element.
	 */
	public static final int INTERNAL_DTD_INTERNAL = -5;

	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * comment. The state to return to when this comment ends is embedded in the
	 * token type as well.
	 */
	public static final int INTERNAL_IN_XML_COMMENT = -(1 << 11);

	/**
	 * Token type specific to XMLTokenMaker denoting a line ending with an unclosed
	 * XML tag; thus a new line is beginning still inside of the tag.
	 */
	public static final int INTERNAL_INTAG = -3;

	public static final int PI = 2;

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	public static final int YYINITIAL = 0;

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = XMLTokenMaker.zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\5\0\2\1\1\0\2\2\1\3\1\4\1\5\1\6"
			+ "\2\1\1\7\4\1\1\10\2\1\1\11\1\1\1\12" + "\1\13\1\14\2\15\1\16\1\17\1\20\1\21\1\22"
			+ "\1\1\1\23\3\1\1\24\1\25\1\4\1\26\1\6" + "\5\0\1\27\4\0\1\30\1\31\5\0\1\32\1\33"
			+ "\3\0\1\34\1\35\6\0\1\36";

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = XMLTokenMaker.zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\5\0\2\1\1\0\2\1\1\11\5\1\1\11\4\1"
			+ "\1\11\2\1\1\11\1\1\3\11\2\1\2\11\1\1" + "\2\11\1\1\1\11\6\1\2\11\5\0\1\11\4\0"
			+ "\1\1\1\11\5\0\2\11\3\0\1\1\1\11\6\0" + "\1\11";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = XMLTokenMaker.zzUnpackCMap(XMLTokenMaker.ZZ_CMAP_PACKED);

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\6\1\4\1\0\1\3\23\0\1\6\1\12\1\11\1\22"
			+ "\1\30\1\22\1\7\1\25\5\22\1\2\1\42\1\24\12\27\1\23" + "\1\10\1\5\1\44\1\21\1\43\1\22\1\16\1\26\1\14\1\15"
			+ "\17\26\1\17\6\26\1\13\1\0\1\20\1\0\1\1\1\0\4\26" + "\1\40\1\35\1\26\1\31\1\36\2\26\1\37\3\26\1\33\2\26"
			+ "\1\34\1\32\2\26\1\41\3\26\3\0\1\22\uff81\0";

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = XMLTokenMaker.zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"
			+ "\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b"
			+ "\0\u0172\0\u0250\0\u0275\0\u029a\0\u02bf\0\u0172\0\u02e4\0\u0309"
			+ "\0\u0172\0\u032e\0\u0172\0\u0172\0\u0172\0\u0353\0\u0378\0\u0172"
			+ "\0\u0172\0\u039d\0\u0172\0\u0172\0\u03c2\0\u0172\0\u03e7\0\u040c"
			+ "\0\u0431\0\u0456\0\u047b\0\u04a0\0\u0172\0\u0172\0\u04c5\0\u04ea"
			+ "\0\u050f\0\u0534\0\u0559\0\u0172\0\u057e\0\u05a3\0\u05c8\0\u05ed"
			+ "\0\u0612\0\u0172\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u0172"
			+ "\0\u0172\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0172\0\u0784\0\u07a9"
			+ "\0\u075f\0\u07ce\0\u07f3\0\u0818\0\u0172";

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = XMLTokenMaker.zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\3\11\1\12\1\13\1\14\1\15\1\16\35\11\2\17"
			+ "\1\20\1\17\1\21\24\17\1\22\3\17\1\23\3\17" + "\1\24\3\17\4\25\1\26\36\25\1\27\1\25\4\30"
			+ "\1\31\1\32\5\30\1\33\4\30\1\34\1\35\23\30" + "\3\36\1\37\1\0\1\36\1\15\2\36\1\40\7\36"
			+ "\1\41\2\36\1\42\1\43\16\36\1\44\11\45\1\46" + "\33\45\25\47\1\46\17\47\20\50\1\51\24\50\4\11"
			+ "\4\0\40\11\1\12\2\0\1\15\1\0\35\11\46\0" + "\1\52\10\0\1\53\1\0\4\52\3\0\1\52\1\54"
			+ "\1\0\1\52\2\0\11\52\1\0\1\55\4\0\1\15" + "\2\0\1\15\36\0\6\16\1\0\1\16\1\56\34\16"
			+ "\2\17\1\0\1\17\1\0\24\17\1\0\3\17\1\0" + "\3\17\1\0\3\17\2\0\1\57\74\0\1\60\44\0"
			+ "\1\61\3\0\1\62\47\0\1\63\3\0\4\25\1\0" + "\36\25\1\0\1\25\21\0\1\64\23\0\4\30\2\0"
			+ "\5\30\1\0\4\30\2\0\23\30\12\0\1\65\32\0" + "\4\36\1\0\1\36\1\0\2\36\1\0\7\36\1\0"
			+ "\2\36\2\0\16\36\1\0\3\36\1\37\1\0\1\36" + "\1\15\2\36\1\0\7\36\1\0\2\36\2\0\16\36"
			+ "\22\0\1\41\23\0\11\45\1\0\33\45\25\47\1\0" + "\17\47\20\50\1\0\24\50\20\0\1\66\25\0\2\52"
			+ "\11\0\4\52\3\0\1\52\2\0\2\52\1\0\12\52" + "\4\0\1\67\10\0\1\70\32\0\1\71\12\0\4\71"
			+ "\3\0\1\71\2\0\1\71\2\0\11\71\24\0\1\72" + "\55\0\1\73\45\0\1\74\50\0\1\75\46\0\1\76"
			+ "\5\0\1\77\63\0\1\100\25\0\1\101\56\0\1\102" + "\31\0\2\71\11\0\4\71\3\0\1\71\2\0\2\71"
			+ "\1\0\12\71\35\0\1\103\34\0\1\104\61\0\1\74" + "\46\0\1\105\4\0\1\106\57\0\1\107\52\0\1\104"
			+ "\10\0\1\74\34\0\1\110\21\0\2\111\4\0\2\111" + "\1\0\2\111\4\105\1\111\1\0\2\111\1\105\1\111"
			+ "\14\105\3\111\16\0\1\112\52\0\1\105\37\0\1\113" + "\43\0\1\114\41\0\1\115\31\0";

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;

	static {
		XMLTokenMaker.completeCloseTags = true;
	}

	/**
	 * Static version of {@link #getCompleteCloseTags()}. This hack is unfortunately
	 * needed for applications to be able to query this value without instantiating
	 * this class.
	 *
	 * @return Whether closing markup tags are completed.
	 * @see #setCompleteCloseTags(boolean)
	 */
	public static boolean getCompleteCloseMarkupTags() {
		return XMLTokenMaker.completeCloseTags;
	}

	/**
	 * Sets whether markup close tags should be completed.
	 *
	 * @param complete
	 *            Whether closing markup tags are completed.
	 * @see #getCompleteCloseTags()
	 */
	public static void setCompleteCloseTags(final boolean complete) {
		XMLTokenMaker.completeCloseTags = complete;
	}

	private static int[] zzUnpackAction() {
		final int[] result = new int[77];
		int offset = 0;
		offset = XMLTokenMaker.zzUnpackAction(XMLTokenMaker.ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	private static int[] zzUnpackAttribute() {
		final int[] result = new int[77];
		int offset = 0;
		offset = XMLTokenMaker.zzUnpackAttribute(XMLTokenMaker.ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(final String packed) {
		final char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 116) {
			int count = packed.charAt(i++);
			final char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	private static int[] zzUnpackRowMap() {
		final int[] result = new int[77];
		int offset = 0;
		offset = XMLTokenMaker.zzUnpackRowMap(XMLTokenMaker.ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			final int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/* user code: */

	private static int[] zzUnpackTrans() {
		final int[] result = new int[2109];
		int offset = 0;
		offset = XMLTokenMaker.zzUnpackTrans(XMLTokenMaker.ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Whether the DTD we're currently in is a locally-defined one. This field is
	 * only valid when in a DOCTYPE element (the <DTD> state).
	 */
	private boolean inInternalDtd;

	/**
	 * The state we were in prior to the current one. This is used to know what
	 * state to resume after an MLC ends.
	 */
	private int prevState;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/**
	 * this buffer contains the current text to be matched and is the source of the
	 * yytext() string
	 */
	private char zzBuffer[];

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** the current lexical state */
	private int zzLexicalState = XMLTokenMaker.YYINITIAL;

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the input device */
	private java.io.Reader zzReader;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/** the current state of the DFA */
	private int zzState;

	/**
	 * Constructor. This must be here because JFlex does not generate a no-parameter
	 * constructor.
	 */
	public XMLTokenMaker() {
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public XMLTokenMaker(final java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public XMLTokenMaker(final java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Adds the token specified to the current linked list of tokens as an "end
	 * token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addEndToken(final int tokenType) {
		this.addToken(this.zzMarkedPos, this.zzMarkedPos, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(final int start, final int end, final int tokenType) {
		final int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start, end, tokenType, so, true);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array
	 *            The character array.
	 * @param start
	 *            The starting offset in the array.
	 * @param end
	 *            The ending offset in the array.
	 * @param tokenType
	 *            The token's type.
	 * @param startOffset
	 *            The offset in the document at which this token occurs.
	 */
	@Override
	public void addToken(final char[] array, final int start, final int end, final int tokenType,
			final int startOffset) {
		super.addToken(array, start, end, tokenType, startOffset);
		this.zzStartRead = this.zzMarkedPos;
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addToken(final int tokenType) {
		this.addToken(this.zzStartRead, this.zzMarkedPos - 1, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType
	 *            The token's type.
	 */
	private void addToken(final int start, final int end, final int tokenType) {
		final int so = start + this.offsetShift;
		this.addToken(this.zzBuffer, start, end, tokenType, so);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected OccurrenceMarker createOccurrenceMarker() {
		return new XmlOccurrenceMarker();
	}

	/**
	 * Returns whether markup close tags should be completed. For XML, the default
	 * value is <code>true</code>.
	 *
	 * @return Whether closing markup tags are completed.
	 * @see #setCompleteCloseTags(boolean)
	 */
	@Override
	public boolean getCompleteCloseTags() {
		return XMLTokenMaker.completeCloseTags;
	}

	/**
	 * Returns <code>Token.MARKUP_TAG_NAME</code>.
	 *
	 * @param type
	 *            The token type.
	 * @return Whether tokens of this type should have "mark occurrences" enabled.
	 */
	@Override
	public boolean getMarkOccurrencesOfTokenType(final int type) {
		return type == TokenTypes.MARKUP_TAG_NAME;
	}

	/**
	 * Returns the first token in the linked list of tokens generated from
	 * <code>text</code>. This method must be implemented by subclasses so they can
	 * correctly implement syntax highlighting.
	 *
	 * @param text
	 *            The text from which to get tokens.
	 * @param initialTokenType
	 *            The token type we should start with.
	 * @param startOffset
	 *            The offset into the document at which <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing the syntax
	 *         highlighted text.
	 */
	@Override
	public Token getTokenList(final Segment text, final int initialTokenType, final int startOffset) {

		this.resetTokenList();
		this.offsetShift = -text.offset + startOffset;
		this.prevState = XMLTokenMaker.YYINITIAL;
		this.inInternalDtd = false;

		// Start off in the proper state.
		int state = XMLTokenMaker.YYINITIAL;
		switch (initialTokenType) {
		case TokenTypes.MARKUP_COMMENT:
			state = XMLTokenMaker.COMMENT;
			break;
		case INTERNAL_DTD:
			state = XMLTokenMaker.DTD;
			break;
		case INTERNAL_DTD_INTERNAL:
			state = XMLTokenMaker.DTD;
			this.inInternalDtd = true;
			break;
		case INTERNAL_ATTR_DOUBLE:
			state = XMLTokenMaker.INATTR_DOUBLE;
			break;
		case INTERNAL_ATTR_SINGLE:
			state = XMLTokenMaker.INATTR_SINGLE;
			break;
		case TokenTypes.MARKUP_PROCESSING_INSTRUCTION:
			state = XMLTokenMaker.PI;
			break;
		case INTERNAL_INTAG:
			state = XMLTokenMaker.INTAG;
			break;
		case TokenTypes.MARKUP_CDATA:
			state = XMLTokenMaker.CDATA;
			break;
		default:
			if (initialTokenType < -1024) { // INTERNAL_IN_XML_COMMENT - prevState
				final int main = -(-initialTokenType & 0xffffff00);
				switch (main) {
				default: // Should never happen
				case INTERNAL_IN_XML_COMMENT:
					state = XMLTokenMaker.COMMENT;
					break;
				}
				this.prevState = -initialTokenType & 0xff;
			} else
				state = TokenTypes.NULL;
		}

		this.start = text.offset;
		this.s = text;
		try {
			this.yyreset(this.zzReader);
			this.yybegin(state);
			return this.yylex();
		} catch (final IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *            the new lexical state
	 */
	@Override
	public final void yybegin(final int newState) {
		this.zzLexicalState = newState;
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(final int pos) {
		return this.zzBuffer[this.zzStartRead + pos];
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		this.zzAtEOF = true; /* indicate end of file */
		this.zzEndRead = this.zzStartRead; /* invalidate buffer */

		if (this.zzReader != null)
			this.zzReader.close();
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return this.zzMarkedPos - this.zzStartRead;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = this.zzEndRead;
		char[] zzBufferL = this.zzBuffer;
		final char[] zzCMapL = XMLTokenMaker.ZZ_CMAP;

		final int[] zzTransL = XMLTokenMaker.ZZ_TRANS;
		final int[] zzRowMapL = XMLTokenMaker.ZZ_ROWMAP;
		final int[] zzAttrL = XMLTokenMaker.ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = this.zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;

			this.zzState = this.zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (this.zzAtEOF) {
						zzInput = XMLTokenMaker.YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						this.zzCurrentPos = zzCurrentPosL;
						this.zzMarkedPos = zzMarkedPosL;
						final boolean eof = this.zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = this.zzCurrentPos;
						zzMarkedPosL = this.zzMarkedPos;
						zzBufferL = this.zzBuffer;
						zzEndReadL = this.zzEndRead;
						if (eof) {
							zzInput = XMLTokenMaker.YYEOF;
							break zzForAction;
						} else
							zzInput = zzBufferL[zzCurrentPosL++];
					}
					final int zzNext = zzTransL[zzRowMapL[this.zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					this.zzState = zzNext;

					final int zzAttributes = zzAttrL[this.zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = this.zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			this.zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : XMLTokenMaker.ZZ_ACTION[zzAction]) {
			case 25: {
				final int temp = this.zzMarkedPos;
				this.addToken(this.start, this.zzStartRead + 2, TokenTypes.MARKUP_COMMENT);
				this.start = temp;
				this.yybegin(this.prevState);
			}
			case 31:
				break;
			case 19: {
				this.yybegin(XMLTokenMaker.INTAG);
				this.addToken(this.start, this.zzStartRead, TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE);
			}
			case 32:
				break;
			case 3: {
				this.addNullToken();
				return this.firstToken;
			}
			case 33:
				break;
			case 29: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_DTD);
				this.start = temp;
				this.prevState = this.zzLexicalState;
				this.yybegin(XMLTokenMaker.COMMENT);
			}
			case 34:
				break;
			case 11: {
				this.inInternalDtd = false;
			}
			case 35:
				break;
			case 4: {
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER);
				this.yybegin(XMLTokenMaker.INTAG);
			}
			case 36:
				break;
			case 24: {
				final int count = this.yylength();
				this.addToken(this.zzStartRead, this.zzStartRead + 1, TokenTypes.MARKUP_TAG_DELIMITER);
				this.addToken(this.zzMarkedPos - (count - 2), this.zzMarkedPos - 1, TokenTypes.MARKUP_TAG_NAME);
				this.yybegin(XMLTokenMaker.INTAG);
			}
			case 37:
				break;
			case 9: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_DTD);
				this.addEndToken(this.inInternalDtd ? XMLTokenMaker.INTERNAL_DTD_INTERNAL : XMLTokenMaker.INTERNAL_DTD);
				return this.firstToken;
			}
			case 38:
				break;
			case 16: {
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER); /* Not valid but we'll still accept it */
			}
			case 39:
				break;
			case 7: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
				this.addEndToken(XMLTokenMaker.INTERNAL_IN_XML_COMMENT - this.prevState);
				return this.firstToken;
			}
			case 40:
				break;
			case 5: {
				this.addToken(TokenTypes.WHITESPACE);
			}
			case 41:
				break;
			case 27: {
				this.start = this.zzStartRead;
				this.prevState = this.zzLexicalState;
				this.yybegin(XMLTokenMaker.COMMENT);
			}
			case 42:
				break;
			case 26: {
				final int temp = this.zzStartRead;
				this.yybegin(XMLTokenMaker.YYINITIAL);
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_CDATA);
				this.addToken(temp, this.zzMarkedPos - 1, TokenTypes.MARKUP_CDATA_DELIMITER);
			}
			case 43:
				break;
			case 6: {
				this.addToken(TokenTypes.MARKUP_ENTITY_REFERENCE);
			}
			case 44:
				break;
			case 12: {
				if (!this.inInternalDtd) {
					this.yybegin(XMLTokenMaker.YYINITIAL);
					this.addToken(this.start, this.zzStartRead, TokenTypes.MARKUP_DTD);
				}
			}
			case 45:
				break;
			case 2: {
				this.addToken(TokenTypes.IDENTIFIER);
			}
			case 46:
				break;
			case 10: {
				this.inInternalDtd = true;
			}
			case 47:
				break;
			case 23: {
				this.yybegin(XMLTokenMaker.YYINITIAL);
				this.addToken(this.start, this.zzStartRead + 1, TokenTypes.MARKUP_PROCESSING_INSTRUCTION);
			}
			case 48:
				break;
			case 21: {
				this.start = this.zzMarkedPos - 2;
				this.inInternalDtd = false;
				this.yybegin(XMLTokenMaker.DTD);
			}
			case 49:
				break;
			case 20: {
				final int count = this.yylength();
				this.addToken(this.zzStartRead, this.zzStartRead, TokenTypes.MARKUP_TAG_DELIMITER);
				this.addToken(this.zzMarkedPos - (count - 1), this.zzMarkedPos - 1, TokenTypes.MARKUP_TAG_NAME);
				this.yybegin(XMLTokenMaker.INTAG);
			}
			case 50:
				break;
			case 22: {
				this.start = this.zzMarkedPos - 2;
				this.yybegin(XMLTokenMaker.PI);
			}
			case 51:
				break;
			case 8: {
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_PROCESSING_INSTRUCTION);
				return this.firstToken;
			}
			case 52:
				break;
			case 14: {
				this.start = this.zzMarkedPos - 1;
				this.yybegin(XMLTokenMaker.INATTR_DOUBLE);
			}
			case 53:
				break;
			case 28: {
				final int temp = this.zzStartRead;
				this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
				this.addHyperlinkToken(temp, this.zzMarkedPos - 1, TokenTypes.MARKUP_COMMENT);
				this.start = this.zzMarkedPos;
			}
			case 54:
				break;
			case 15: {
				this.yybegin(XMLTokenMaker.YYINITIAL);
				this.addToken(TokenTypes.MARKUP_TAG_DELIMITER);
			}
			case 55:
				break;
			case 17: {
				this.start = this.zzMarkedPos - 1;
				this.yybegin(XMLTokenMaker.INATTR_SINGLE);
			}
			case 56:
				break;
			case 18: {
				this.addToken(TokenTypes.OPERATOR);
			}
			case 57:
				break;
			case 30: {
				this.addToken(TokenTypes.MARKUP_CDATA_DELIMITER);
				this.start = this.zzMarkedPos;
				this.yybegin(XMLTokenMaker.CDATA);
			}
			case 58:
				break;
			case 13: {
				this.addToken(TokenTypes.MARKUP_TAG_ATTRIBUTE);
			}
			case 59:
				break;
			case 1: {
			}
			case 60:
				break;
			default:
				if (zzInput == XMLTokenMaker.YYEOF && this.zzStartRead == this.zzCurrentPos) {
					this.zzAtEOF = true;
					switch (this.zzLexicalState) {
					case INTAG: {
						this.addToken(this.start, this.zzStartRead - 1, XMLTokenMaker.INTERNAL_INTAG);
						return this.firstToken;
					}
					case 78:
						break;
					case DTD: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_DTD);
						this.addEndToken(
								this.inInternalDtd ? XMLTokenMaker.INTERNAL_DTD_INTERNAL : XMLTokenMaker.INTERNAL_DTD);
						return this.firstToken;
					}
					case 79:
						break;
					case INATTR_DOUBLE: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE);
						this.addEndToken(XMLTokenMaker.INTERNAL_ATTR_DOUBLE);
						return this.firstToken;
					}
					case 80:
						break;
					case YYINITIAL: {
						this.addNullToken();
						return this.firstToken;
					}
					case 81:
						break;
					case COMMENT: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_COMMENT);
						this.addEndToken(XMLTokenMaker.INTERNAL_IN_XML_COMMENT - this.prevState);
						return this.firstToken;
					}
					case 82:
						break;
					case CDATA: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_CDATA);
						return this.firstToken;
					}
					case 83:
						break;
					case INATTR_SINGLE: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_TAG_ATTRIBUTE_VALUE);
						this.addEndToken(XMLTokenMaker.INTERNAL_ATTR_SINGLE);
						return this.firstToken;
					}
					case 84:
						break;
					case PI: {
						this.addToken(this.start, this.zzStartRead - 1, TokenTypes.MARKUP_PROCESSING_INSTRUCTION);
						return this.firstToken;
					}
					case 85:
						break;
					default:
						return null;
					}
				} else
					this.zzScanError(XMLTokenMaker.ZZ_NO_MATCH);
			}
		}
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *            the number of characters to be read again. This number must not be
	 *            greater than yylength()!
	 */
	public void yypushback(final int number) {
		if (number > this.yylength())
			this.zzScanError(XMLTokenMaker.ZZ_PUSHBACK_2BIG);

		this.zzMarkedPos -= number;
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>YY_INITIAL</tt>.
	 *
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(final java.io.Reader reader) {
		// 's' has been updated.
		this.zzBuffer = this.s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill no longer
		 * "refills" the buffer (since the way we do it, it's always "full" the first
		 * time through, since it points to the segment's array). So, we assign
		 * zzEndRead here.
		 */
		// zzStartRead = zzEndRead = s.offset;
		this.zzStartRead = this.s.offset;
		this.zzEndRead = this.zzStartRead + this.s.count - 1;
		this.zzCurrentPos = this.zzMarkedPos = this.s.offset;
		this.zzLexicalState = XMLTokenMaker.YYINITIAL;
		this.zzReader = reader;
		this.zzAtEOF = false;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return this.zzLexicalState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos - this.zzStartRead);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>true</code> if EOF was reached, otherwise <code>false</code>.
	 */
	private boolean zzRefill() {
		return this.zzCurrentPos >= this.s.offset + this.s.count;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(final int errorCode) {
		String message;
		try {
			message = XMLTokenMaker.ZZ_ERROR_MSG[errorCode];
		} catch (final ArrayIndexOutOfBoundsException e) {
			message = XMLTokenMaker.ZZ_ERROR_MSG[XMLTokenMaker.ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

}
